CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT (SEMS)

SET(SEMS_MAJOR_VERSION 1)
SET(SEMS_MINOR_VERSION 1)
SET(SEMS_BUILD_VERSION 0)
SET(SEMS_EXTRA_VERSION dev)
SET(SEMS_VERSION
    "${SEMS_MAJOR_VERSION}.${SEMS_MINOR_VERSION}.${SEMS_BUILD_VERSION}-${SEMS_EXTRA_VERSION}")

OPTION(SEMS_USE_SPANDSP       "Build with spandsp" OFF)
OPTION(SEMS_USE_LIBSAMPLERATE "Build with libsamplerate" OFF)
OPTION(SEMS_USE_ZRTP          "Build with ZRTP" OFF)
OPTION(SEMS_USE_MONITORING    "Build with monitoring support" OFF)

IF(SEMS_USE_SPANDSP)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_SPANDSP -D__STDC_LIMIT_MACROS")
  SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -DUSE_SPANDSP -D__STDC_LIMIT_MACROS")
ENDIF(SEMS_USE_SPANDSP)

IF(SEMS_USE_LIBSAMPLERATE)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_LIBSAMPLERATE")
  SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -DUSE_LIBSAMPLERATE")
ENDIF(SEMS_USE_LIBSAMPLERATE)

IF(SEMS_USE_MONITORING)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_MONITORING")
  SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -DUSE_MONITORING")  
ENDIF(SEMS_USE_MONITORING)

# todo: get build arch
SET(ARCH 32)
SET(OS 1)

SET(CMAKE_VERBOSE_MAKEFILE ON)

INCLUDE_DIRECTORIES (${SEMS_SOURCE_DIR}/core/ampi)
INCLUDE_DIRECTORIES (${SEMS_SOURCE_DIR}/core/amci)
INCLUDE_DIRECTORIES (${SEMS_SOURCE_DIR}/core)

CONFIGURE_FILE( config.h.cmake ${SEMS_SOURCE_DIR}/core/config.h )

IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_THREAD_SAFE -D_REENTRANT -Wall -Wno-reorder -fPIC -g -O2")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_THREAD_SAFE -D_REENTRANT -Wall -Wno-reorder -fPIC -g -O2")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")
SET(CMAKE_C_FLAGS_DEBUG   "${CMAKE_C_FLAGS_DEBUG}   -D_DEBUG")


ADD_SUBDIRECTORY (core)
#ADD_SUBDIRECTORY (apps)

