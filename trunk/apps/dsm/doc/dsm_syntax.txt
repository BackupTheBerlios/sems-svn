=============================
-- comment
import(mod_name);

[initial] state name 
	  [ enter { 
	      action; 
	      action;
	      ...
	    } ] 
	  [ exit { 
	      action;
	      action;
	      ...
	    } ]
      ;

transition name s1 - [ { [not] condition; [not] condition; ... } ] [/ { action; action; ...} ]  -> s2;
 or 
transition name (s1a, s1b[, s1c, ...])  - [ { [not] condition; [not] condition; ... } ] [/ { action; action; ...} ]  -> s2;

=============================
#paramname uses the event parameter 'paramname' (from current event)
$varname uses the variable varname (from session's variable map)
@selectname uses the "select" 'selectname' (from the session's dialog)
=============================
actions:
 -- reprocess the current event after transition:
 repost()

 -- call/jump/return sub-FSM
 jumpFSM(name)
 callFSM(name)
 returnFSM()

  stop(<send bye>)
   e.g. stop(false), stop(true)

 playPrompt(param)
   from promptCollection, e.g. playPrompt("hello");
   if $prompts.default_fallback=yes, default prompt set is tried if
   prompt not found in current prompt set
 playPromptLooped(param)
 playFile(filename)
 recordFile(filename)
 stopRecord()
 getRecordLength([dst_varname])   -- only while recording! default dst var: record_length
 getRecordDataSize([dst_varname]) -- only while recording! default dst var: record_data_size
 closePlaylist()
 addSeparator(id)
   fires event when playlist hits it 
 connectMedia() 
   set playlist as input and output of session, and connect to mediaprocessor 
 disconnectMedia() 
   disconnect from mediaprocessor

 mute() 
   set RTP stream to muted (don't send and receive RTP packets)
 unmute() 
   set RTP stream to unmuted (send and receive RTP packets)

 enableDTMFDetection() 
 disableDTMFDetection()

 B2B.connectCallee(remote_party, remote_uri)
   connect second leg of B2B session (see AmB2BSession)

 B2B.terminateOtherLeg
   disconnect second leg of B2B session (see AmB2BSession)

 setPrompts(name) 
   if more than one prompt sets are loaded

 set($var=value)
  e.g.  set($var="text"); set($var=$var2); set($var=#key)
 append($var, value)
 e.g. append($var, "text"); append($var, #key);
      append($var, @select); append($var, $var2);

 log(level, text)
   e.g. log(1, $var1)
 -- log all variables:
 logVars(level) 

 setTimer(timer_id, timeout)
   e.g. setTimer(1, $timeout)

  DI(factory, function [, params...])
  e.g. DI(factory, function, $var_param, (int)int_param, "$str param", @select_par, ...)
       DI(user_timer, setTimer, (int)1, (int)5, @local_tag);
  DIgetResult(factory, function, param,...)
    saves result from DI call to DI_res or DI_res0, DI_res1, ...

  postEvent(session_id, variable_name)
     posts event with variable as DSM event parameter
  postEvent(session_id, var) 
     posts event with complete current variable set as DSM event parameter
============================= 
conditions:
 
 test(#key == 1)
 test(#key != 1)
 test(#key < 1)
 test(#key > 1)

 test($var == 1)
 test($var != 1)
 test($var < 1)
 test($var < 1)

 test(len($var) < len(#key))
 test(len($var) < len(@user))

 -- like test(expr), but only on key press
 keyTest(expr) 
 timerTest(expr)
 noAudioTest(expr)
 separatorTest(expr)
 eventTest(expr)

 keyPress(no) 
  -- bye received: 
 hangup  

  -- execution is invite (with run_invite_event):
 invite 
  -- execution is start of session (with run_invite_event, otherwise its always true):
 sessionStart

 B2B.otherReply 
   Reply on other leg received (see AmB2BSession)
    #code    - reply code
    #reason  - reply reason
    #hdrs    - headers
     
 B2B.otherBye
   BYE on other leg received
    #hdrs    - headers

=============================
@selects :
 local_tag
 user
 domain
 remote_tag
 callid
 local_uri
 remote_uri
=============================
imports:
 module imported with import(mod_name); loads mod_name.so in 
 module load path. modules provide conditions and actions.
 modules' actions/conditions-factory is checked first 
 (modules can override core conditions/actions)
=============================
special variables:
    reply_request       "0" ->do not reply to the request as standard behaviour

    connect_session     "0" ->do not connect session to media processor on start
=============================
errors:
   actions set $errno
     #define DSM_ERRNO_OK          ""
     #define DSM_ERRNO_FILE        "1"
     #define DSM_ERRNO_UNKNOWN_ARG "2"
     #define DSM_ERRNO_GENERAL     "99"
     ...
