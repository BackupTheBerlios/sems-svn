/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.1.1 (4.1.1-255) on Fri Feb  9 10:04:41 2007
 */

#include "sipAPIpy_sems.h"
#include "sippy_semsIvrDialog.h"

sipIvrDialog::sipIvrDialog(): IvrDialog(), sipPySelf(0)
{
	sipCommonCtor(sipPyMethods,7);
}

sipIvrDialog::~sipIvrDialog()
{
	sipCommonDtor(sipPySelf);
}

void sipIvrDialog::onInvite(const AmSipRequest& a0)
{
	extern void sipVH_py_sems_1(sip_gilstate_t,PyObject *,const AmSipRequest&);

	sip_gilstate_t sipGILState;
	PyObject *meth;

	meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipNm_py_sems_onInvite);

	if (!meth)
	{
		IvrDialog::onInvite(a0);
		return;
	}

	sipVH_py_sems_1(sipGILState,meth,a0);
}

void sipIvrDialog::onSessionStart(const AmSipRequest& a0)
{
	extern void sipVH_py_sems_1(sip_gilstate_t,PyObject *,const AmSipRequest&);

	sip_gilstate_t sipGILState;
	PyObject *meth;

	meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipNm_py_sems_onSessionStart);

	if (!meth)
	{
		IvrDialog::onSessionStart(a0);
		return;
	}

	sipVH_py_sems_1(sipGILState,meth,a0);
}

void sipIvrDialog::onBye(const AmSipRequest& a0)
{
	extern void sipVH_py_sems_1(sip_gilstate_t,PyObject *,const AmSipRequest&);

	sip_gilstate_t sipGILState;
	PyObject *meth;

	meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipNm_py_sems_onBye);

	if (!meth)
	{
		IvrDialog::onBye(a0);
		return;
	}

	sipVH_py_sems_1(sipGILState,meth,a0);
}

void sipIvrDialog::onCancel()
{
	extern void sipVH_py_sems_3(sip_gilstate_t,PyObject *);

	sip_gilstate_t sipGILState;
	PyObject *meth;

	meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipNm_py_sems_onCancel);

	if (!meth)
	{
		IvrDialog::onCancel();
		return;
	}

	sipVH_py_sems_3(sipGILState,meth);
}

void sipIvrDialog::onDtmf(int a0,int a1)
{
	extern void sipVH_py_sems_2(sip_gilstate_t,PyObject *,int,int);

	sip_gilstate_t sipGILState;
	PyObject *meth;

	meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipNm_py_sems_onDtmf);

	if (!meth)
	{
		IvrDialog::onDtmf(a0,a1);
		return;
	}

	sipVH_py_sems_2(sipGILState,meth,a0,a1);
}

void sipIvrDialog::onOtherBye(const AmSipRequest& a0)
{
	extern void sipVH_py_sems_1(sip_gilstate_t,PyObject *,const AmSipRequest&);

	sip_gilstate_t sipGILState;
	PyObject *meth;

	meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipNm_py_sems_onOtherBye);

	if (!meth)
	{
		IvrDialog::onOtherBye(a0);
		return;
	}

	sipVH_py_sems_1(sipGILState,meth,a0);
}

void sipIvrDialog::onOtherReply(const AmSipReply& a0)
{
	extern void sipVH_py_sems_0(sip_gilstate_t,PyObject *,const AmSipReply&);

	sip_gilstate_t sipGILState;
	PyObject *meth;

	meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipNm_py_sems_onOtherReply);

	if (!meth)
	{
		IvrDialog::onOtherReply(a0);
		return;
	}

	sipVH_py_sems_0(sipGILState,meth,a0);
}


static PyObject *meth_IvrDialog_acceptAudio(PyObject *sipSelf,PyObject *sipArgs)
{
	int sipArgsParsed = 0;

	{
		const string * a0;
		int a0IsTemp = 0;
		const string * a1;
		int a1IsTemp = 0;
		string * a2;
		IvrDialog *sipCpp;

		if (sipParseArgs(&sipArgsParsed,sipArgs,"mM1M1",sipSelf,sipClass_IvrDialog,&sipCpp,sipConvertTo_string,&a0,&a0IsTemp,sipConvertTo_string,&a1,&a1IsTemp))
		{
			int sipRes;
			a2 = new string();

			sipRes = sipCpp -> IvrDialog::acceptAudio(*a0,*a1,a2);

			if (a0IsTemp)
				delete const_cast<string *>(a0);

			if (a1IsTemp)
				delete const_cast<string *>(a1);

			return sipBuildResult(0,"(iT)",sipRes,a2,sipConvertFrom_string);
		}
	}

	/* Raise an exception if the arguments couldn't be parsed. */
	sipNoMethod(sipArgsParsed,sipNm_py_sems_IvrDialog,sipNm_py_sems_acceptAudio);

	return NULL;
}


static PyObject *meth_IvrDialog_setStopped(PyObject *sipSelf,PyObject *sipArgs)
{
	int sipArgsParsed = 0;

	{
		IvrDialog *sipCpp;

		if (sipParseArgs(&sipArgsParsed,sipArgs,"m",sipSelf,sipClass_IvrDialog,&sipCpp))
		{
			sipCpp -> IvrDialog::setStopped();

			Py_INCREF(Py_None);
			return Py_None;
		}
	}

	/* Raise an exception if the arguments couldn't be parsed. */
	sipNoMethod(sipArgsParsed,sipNm_py_sems_IvrDialog,sipNm_py_sems_setStopped);

	return NULL;
}


static PyObject *meth_IvrDialog_onInvite(PyObject *sipSelf,PyObject *sipArgs)
{
	int sipArgsParsed = 0;

	{
		const AmSipRequest * a0;
		IvrDialog *sipCpp;

		if (sipParseArgs(&sipArgsParsed,sipArgs,"mJ1",sipSelf,sipClass_IvrDialog,&sipCpp,sipClass_AmSipRequest,&a0))
		{
			sipCpp -> IvrDialog::onInvite(*a0);

			Py_INCREF(Py_None);
			return Py_None;
		}
	}

	/* Raise an exception if the arguments couldn't be parsed. */
	sipNoMethod(sipArgsParsed,sipNm_py_sems_IvrDialog,sipNm_py_sems_onInvite);

	return NULL;
}


static PyObject *meth_IvrDialog_onSessionStart(PyObject *sipSelf,PyObject *sipArgs)
{
	int sipArgsParsed = 0;

	{
		const AmSipRequest * a0;
		IvrDialog *sipCpp;

		if (sipParseArgs(&sipArgsParsed,sipArgs,"mJ1",sipSelf,sipClass_IvrDialog,&sipCpp,sipClass_AmSipRequest,&a0))
		{
			sipCpp -> IvrDialog::onSessionStart(*a0);

			Py_INCREF(Py_None);
			return Py_None;
		}
	}

	/* Raise an exception if the arguments couldn't be parsed. */
	sipNoMethod(sipArgsParsed,sipNm_py_sems_IvrDialog,sipNm_py_sems_onSessionStart);

	return NULL;
}


static PyObject *meth_IvrDialog_onBye(PyObject *sipSelf,PyObject *sipArgs)
{
	int sipArgsParsed = 0;

	{
		const AmSipRequest * a0;
		IvrDialog *sipCpp;

		if (sipParseArgs(&sipArgsParsed,sipArgs,"mJ1",sipSelf,sipClass_IvrDialog,&sipCpp,sipClass_AmSipRequest,&a0))
		{
			sipCpp -> IvrDialog::onBye(*a0);

			Py_INCREF(Py_None);
			return Py_None;
		}
	}

	/* Raise an exception if the arguments couldn't be parsed. */
	sipNoMethod(sipArgsParsed,sipNm_py_sems_IvrDialog,sipNm_py_sems_onBye);

	return NULL;
}


static PyObject *meth_IvrDialog_onCancel(PyObject *sipSelf,PyObject *sipArgs)
{
	int sipArgsParsed = 0;

	{
		IvrDialog *sipCpp;

		if (sipParseArgs(&sipArgsParsed,sipArgs,"m",sipSelf,sipClass_IvrDialog,&sipCpp))
		{
			sipCpp -> IvrDialog::onCancel();

			Py_INCREF(Py_None);
			return Py_None;
		}
	}

	/* Raise an exception if the arguments couldn't be parsed. */
	sipNoMethod(sipArgsParsed,sipNm_py_sems_IvrDialog,sipNm_py_sems_onCancel);

	return NULL;
}


static PyObject *meth_IvrDialog_onDtmf(PyObject *sipSelf,PyObject *sipArgs)
{
	int sipArgsParsed = 0;

	{
		int a0;
		int a1;
		IvrDialog *sipCpp;

		if (sipParseArgs(&sipArgsParsed,sipArgs,"mii",sipSelf,sipClass_IvrDialog,&sipCpp,&a0,&a1))
		{
			sipCpp -> IvrDialog::onDtmf(a0,a1);

			Py_INCREF(Py_None);
			return Py_None;
		}
	}

	/* Raise an exception if the arguments couldn't be parsed. */
	sipNoMethod(sipArgsParsed,sipNm_py_sems_IvrDialog,sipNm_py_sems_onDtmf);

	return NULL;
}


static PyObject *meth_IvrDialog_onOtherBye(PyObject *sipSelf,PyObject *sipArgs)
{
	int sipArgsParsed = 0;

	{
		const AmSipRequest * a0;
		IvrDialog *sipCpp;

		if (sipParseArgs(&sipArgsParsed,sipArgs,"mJ1",sipSelf,sipClass_IvrDialog,&sipCpp,sipClass_AmSipRequest,&a0))
		{
			sipCpp -> IvrDialog::onOtherBye(*a0);

			Py_INCREF(Py_None);
			return Py_None;
		}
	}

	/* Raise an exception if the arguments couldn't be parsed. */
	sipNoMethod(sipArgsParsed,sipNm_py_sems_IvrDialog,sipNm_py_sems_onOtherBye);

	return NULL;
}


static PyObject *meth_IvrDialog_onOtherReply(PyObject *sipSelf,PyObject *sipArgs)
{
	int sipArgsParsed = 0;

	{
		const AmSipReply * a0;
		IvrDialog *sipCpp;

		if (sipParseArgs(&sipArgsParsed,sipArgs,"mJ1",sipSelf,sipClass_IvrDialog,&sipCpp,sipClass_AmSipReply,&a0))
		{
			sipCpp -> IvrDialog::onOtherReply(*a0);

			Py_INCREF(Py_None);
			return Py_None;
		}
	}

	/* Raise an exception if the arguments couldn't be parsed. */
	sipNoMethod(sipArgsParsed,sipNm_py_sems_IvrDialog,sipNm_py_sems_onOtherReply);

	return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
static void *cast_IvrDialog(void *ptr,sipWrapperType *targetClass)
{
	if (targetClass == sipClass_IvrDialog)
		return ptr;

	return NULL;
}


static void dealloc_IvrDialog(sipWrapper *sipSelf)
{
	if (!sipIsSimple(sipSelf))
		reinterpret_cast<sipIvrDialog *>(sipSelf -> u.cppPtr) -> sipPySelf = NULL;

	if (sipIsPyOwned(sipSelf))
	{
		if (!sipIsSimple(sipSelf))
			delete reinterpret_cast<sipIvrDialog *>(sipSelf -> u.cppPtr);
		else
			delete reinterpret_cast<IvrDialog *>(sipSelf -> u.cppPtr);
	}
}


static void *init_IvrDialog(sipWrapper *sipSelf,PyObject *sipArgs,int *)
{
	int sipArgsParsed = 0;
	sipIvrDialog *sipCpp = 0;

	if (!sipCpp)
	{
		if (sipParseArgs(&sipArgsParsed,sipArgs,""))
		{
			sipCpp = new sipIvrDialog();
		}
	}

	if (!sipCpp)
	{
		sipNoCtor(sipArgsParsed,sipNm_py_sems_IvrDialog);
		return 0;
	}

	sipCpp -> sipPySelf = sipSelf;

	return sipCpp;
}


static PyObject *var_IvrDialog_dlg(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	AmSipDialog *val;
	IvrDialog *sipCpp = reinterpret_cast<IvrDialog *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_IvrDialog));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> dlg;

		valobj = sipMapCppToSelf(val,sipClass_AmSipDialog);

		return valobj;
	}

	val = reinterpret_cast<AmSipDialog *>(sipForceConvertTo_AmSipDialog(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_sems_IvrDialog,sipNm_py_sems_dlg);
		return NULL;
	}

	sipCpp -> dlg = *val;

	Py_INCREF(Py_None);
	return Py_None;
}

PyMethodDef variables_IvrDialog[] = {
	{sipNm_py_sems_dlg, var_IvrDialog_dlg, 0, NULL},
	{0, 0, 0, 0}
};


static void *forceConvertTo_IvrDialog(PyObject *valobj,int *iserrp)
{
	if (*iserrp || valobj == NULL)
		return NULL;

	if (valobj == Py_None || sipIsSubClassInstance(valobj,sipClass_IvrDialog))
		return sipConvertToCpp(valobj,sipClass_IvrDialog,iserrp);

	sipBadClass(sipNm_py_sems_IvrDialog);

	*iserrp = 1;

	return NULL;
}


static PyMethodDef methods_IvrDialog[] = {
	{sipNm_py_sems_acceptAudio, meth_IvrDialog_acceptAudio, METH_VARARGS, NULL},
	{sipNm_py_sems_onBye, meth_IvrDialog_onBye, METH_VARARGS, NULL},
	{sipNm_py_sems_onCancel, meth_IvrDialog_onCancel, METH_VARARGS, NULL},
	{sipNm_py_sems_onDtmf, meth_IvrDialog_onDtmf, METH_VARARGS, NULL},
	{sipNm_py_sems_onInvite, meth_IvrDialog_onInvite, METH_VARARGS, NULL},
	{sipNm_py_sems_onOtherBye, meth_IvrDialog_onOtherBye, METH_VARARGS, NULL},
	{sipNm_py_sems_onOtherReply, meth_IvrDialog_onOtherReply, METH_VARARGS, NULL},
	{sipNm_py_sems_onSessionStart, meth_IvrDialog_onSessionStart, METH_VARARGS, NULL},
	{sipNm_py_sems_setStopped, meth_IvrDialog_setStopped, METH_VARARGS, NULL}
};


/* The main type data structure. */
sipTypeDef sipType_IvrDialog = {
	0,
	"py_sems.IvrDialog",
	-1,
	0,
	0,
	9, methods_IvrDialog,
	0, 0,
	variables_IvrDialog,
	init_IvrDialog,
	dealloc_IvrDialog,
	cast_IvrDialog,
	forceConvertTo_IvrDialog,
	0,
	0,
	0,
	{0, 0, 0, 0, 0, 0}
};
