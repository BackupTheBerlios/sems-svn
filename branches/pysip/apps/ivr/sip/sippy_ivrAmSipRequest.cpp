/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.1.1 (4.1.1-255) on Fri Sep  8 11:08:26 2006
 */

#include "sipAPIpy_ivr.h"
#include "sippy_ivrAmSipRequest.h"


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
static void *cast_AmSipRequest(void *ptr,sipWrapperType *targetClass)
{
	if (targetClass == sipClass_AmSipRequest)
		return ptr;

	return NULL;
}


static void dealloc_AmSipRequest(sipWrapper *sipSelf)
{
	if (sipIsPyOwned(sipSelf))
	{
		delete reinterpret_cast<AmSipRequest *>(sipSelf -> u.cppPtr);
	}
}


static void *init_AmSipRequest(sipWrapper *,PyObject *sipArgs,int *)
{
	int sipArgsParsed = 0;
	AmSipRequest *sipCpp = 0;

	if (!sipCpp)
	{
		if (sipParseArgs(&sipArgsParsed,sipArgs,""))
		{
			sipCpp = new AmSipRequest();
		}
	}

	if (!sipCpp)
	{
		const AmSipRequest * a0;

		if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipClass_AmSipRequest,&a0))
		{
			sipCpp = new AmSipRequest(*a0);
		}
	}

	if (!sipCpp)
	{
		sipNoCtor(sipArgsParsed,sipNm_py_ivr_AmSipRequest);
		return 0;
	}

	return sipCpp;
}


static PyObject *var_AmSipRequest_key(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> key;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_key);
		return NULL;
	}

	sipCpp -> key = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_next_hop(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> next_hop;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_next_hop);
		return NULL;
	}

	sipCpp -> next_hop = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_route(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> route;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_route);
		return NULL;
	}

	sipCpp -> route = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_body(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> body;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_body);
		return NULL;
	}

	sipCpp -> body = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_hdrs(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> hdrs;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_hdrs);
		return NULL;
	}

	sipCpp -> hdrs = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_cseq(PyObject *sipSelf,PyObject *valobj)
{
	unsigned val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = sipCpp -> cseq;

		valobj = PyInt_FromLong((long)val);

		return valobj;
	}

	val = (unsigned)PyInt_AsLong(valobj);

	if (PyErr_Occurred() != NULL)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_cseq);
		return NULL;
	}

	sipCpp -> cseq = val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_to_tag(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> to_tag;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_to_tag);
		return NULL;
	}

	sipCpp -> to_tag = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_from_tag(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> from_tag;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_from_tag);
		return NULL;
	}

	sipCpp -> from_tag = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_callid(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> callid;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_callid);
		return NULL;
	}

	sipCpp -> callid = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_to(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> to;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_to);
		return NULL;
	}

	sipCpp -> to = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_from(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> from;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_from);
		return NULL;
	}

	sipCpp -> from = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_from_uri(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> from_uri;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_from_uri);
		return NULL;
	}

	sipCpp -> from_uri = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_r_uri(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> r_uri;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_r_uri);
		return NULL;
	}

	sipCpp -> r_uri = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_port(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> port;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_port);
		return NULL;
	}

	sipCpp -> port = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_dstip(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> dstip;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_dstip);
		return NULL;
	}

	sipCpp -> dstip = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_domain(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> domain;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_domain);
		return NULL;
	}

	sipCpp -> domain = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_user(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> user;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_user);
		return NULL;
	}

	sipCpp -> user = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_method(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> method;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_method);
		return NULL;
	}

	sipCpp -> method = *val;

	Py_INCREF(Py_None);
	return Py_None;
}


static PyObject *var_AmSipRequest_cmd(PyObject *sipSelf,PyObject *valobj)
{
	int iserr = 0;
	string *val;
	AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipGetCppPtr((sipWrapper *)sipSelf,sipClass_AmSipRequest));

	if (!sipCpp)
		return NULL;

	if (valobj == NULL)
	{
		val = &sipCpp -> cmd;

		valobj = sipConvertFrom_string(val);

		return valobj;
	}

	val = reinterpret_cast<string *>(sipForceConvertTo_string(valobj,&iserr));

	if (iserr)
	{
		sipBadSetType(sipNm_py_ivr_AmSipRequest,sipNm_py_ivr_cmd);
		return NULL;
	}

	sipCpp -> cmd = *val;

	Py_INCREF(Py_None);
	return Py_None;
}

PyMethodDef variables_AmSipRequest[] = {
	{sipNm_py_ivr_key, var_AmSipRequest_key, 0, NULL},
	{sipNm_py_ivr_next_hop, var_AmSipRequest_next_hop, 0, NULL},
	{sipNm_py_ivr_route, var_AmSipRequest_route, 0, NULL},
	{sipNm_py_ivr_body, var_AmSipRequest_body, 0, NULL},
	{sipNm_py_ivr_hdrs, var_AmSipRequest_hdrs, 0, NULL},
	{sipNm_py_ivr_cseq, var_AmSipRequest_cseq, 0, NULL},
	{sipNm_py_ivr_to_tag, var_AmSipRequest_to_tag, 0, NULL},
	{sipNm_py_ivr_from_tag, var_AmSipRequest_from_tag, 0, NULL},
	{sipNm_py_ivr_callid, var_AmSipRequest_callid, 0, NULL},
	{sipNm_py_ivr_to, var_AmSipRequest_to, 0, NULL},
	{sipNm_py_ivr_from, var_AmSipRequest_from, 0, NULL},
	{sipNm_py_ivr_from_uri, var_AmSipRequest_from_uri, 0, NULL},
	{sipNm_py_ivr_r_uri, var_AmSipRequest_r_uri, 0, NULL},
	{sipNm_py_ivr_port, var_AmSipRequest_port, 0, NULL},
	{sipNm_py_ivr_dstip, var_AmSipRequest_dstip, 0, NULL},
	{sipNm_py_ivr_domain, var_AmSipRequest_domain, 0, NULL},
	{sipNm_py_ivr_user, var_AmSipRequest_user, 0, NULL},
	{sipNm_py_ivr_method, var_AmSipRequest_method, 0, NULL},
	{sipNm_py_ivr_cmd, var_AmSipRequest_cmd, 0, NULL},
	{0, 0, 0, 0}
};


static void *forceConvertTo_AmSipRequest(PyObject *valobj,int *iserrp)
{
	if (*iserrp || valobj == NULL)
		return NULL;

	if (valobj == Py_None || sipIsSubClassInstance(valobj,sipClass_AmSipRequest))
		return sipConvertToCpp(valobj,sipClass_AmSipRequest,iserrp);

	sipBadClass(sipNm_py_ivr_AmSipRequest);

	*iserrp = 1;

	return NULL;
}


/* The main type data structure. */
sipTypeDef sipType_AmSipRequest = {
	0,
	"py_ivr.AmSipRequest",
	-1,
	0,
	0,
	0, 0,
	0, 0,
	variables_AmSipRequest,
	init_AmSipRequest,
	dealloc_AmSipRequest,
	cast_AmSipRequest,
	forceConvertTo_AmSipRequest,
	0,
	0,
	0,
	{0, 0, 0, 0, 0, 0}
};
