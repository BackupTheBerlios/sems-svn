/*
 * Module code.
 *
 * Generated by SIP 4.1.1 (4.1.1-255) on Fri Sep  8 11:08:26 2006
 */

#include "sipAPIpy_ivr.h"

#include "sippy_ivrIvrDialog.h"
#include "sippy_ivrAmSipDialog.h"
#include "sippy_ivrAmSipReply.h"
#include "sippy_ivrAmSipRequest.h"
#include "sippy_ivrstring.h"



/* Define the strings used by this module. */
char sipNm_py_ivr_onOtherReply[] = "onOtherReply";
char sipNm_py_ivr_onOtherBye[] = "onOtherBye";
char sipNm_py_ivr_onDtmf[] = "onDtmf";
char sipNm_py_ivr_onCancel[] = "onCancel";
char sipNm_py_ivr_onBye[] = "onBye";
char sipNm_py_ivr_onSessionStart[] = "onSessionStart";
char sipNm_py_ivr_onInvite[] = "onInvite";
char sipNm_py_ivr_setStopped[] = "setStopped";
char sipNm_py_ivr_acceptAudio[] = "acceptAudio";
char sipNm_py_ivr_dlg[] = "dlg";
char sipNm_py_ivr_IvrDialog[] = "IvrDialog";
char sipNm_py_ivr_reinvite[] = "reinvite";
char sipNm_py_ivr_update[] = "update";
char sipNm_py_ivr_cancel[] = "cancel";
char sipNm_py_ivr_bye[] = "bye";
char sipNm_py_ivr_sendRequest[] = "sendRequest";
char sipNm_py_ivr_reply[] = "reply";
char sipNm_py_ivr_updateStatus[] = "updateStatus";
char sipNm_py_ivr_getContactHdr[] = "getContactHdr";
char sipNm_py_ivr_getStatus[] = "getStatus";
char sipNm_py_ivr_getUACTransPending[] = "getUACTransPending";
char sipNm_py_ivr_setRoute[] = "setRoute";
char sipNm_py_ivr_getRoute[] = "getRoute";
char sipNm_py_ivr_local_party[] = "local_party";
char sipNm_py_ivr_remote_party[] = "remote_party";
char sipNm_py_ivr_contact_uri[] = "contact_uri";
char sipNm_py_ivr_remote_uri[] = "remote_uri";
char sipNm_py_ivr_local_uri[] = "local_uri";
char sipNm_py_ivr_sip_port[] = "sip_port";
char sipNm_py_ivr_sip_ip[] = "sip_ip";
char sipNm_py_ivr_Disconnecting[] = "Disconnecting";
char sipNm_py_ivr_Connected[] = "Connected";
char sipNm_py_ivr_Pending[] = "Pending";
char sipNm_py_ivr_Disconnected[] = "Disconnected";
char sipNm_py_ivr_AmSipDialog[] = "AmSipDialog";
char sipNm_py_ivr_local_tag[] = "local_tag";
char sipNm_py_ivr_remote_tag[] = "remote_tag";
char sipNm_py_ivr_next_request_uri[] = "next_request_uri";
char sipNm_py_ivr_reason[] = "reason";
char sipNm_py_ivr_code[] = "code";
char sipNm_py_ivr_AmSipReply[] = "AmSipReply";
char sipNm_py_ivr_getHeader[] = "getHeader";
char sipNm_py_ivr_key[] = "key";
char sipNm_py_ivr_next_hop[] = "next_hop";
char sipNm_py_ivr_route[] = "route";
char sipNm_py_ivr_body[] = "body";
char sipNm_py_ivr_hdrs[] = "hdrs";
char sipNm_py_ivr_cseq[] = "cseq";
char sipNm_py_ivr_to_tag[] = "to_tag";
char sipNm_py_ivr_from_tag[] = "from_tag";
char sipNm_py_ivr_callid[] = "callid";
char sipNm_py_ivr_to[] = "to";
char sipNm_py_ivr_from[] = "from";
char sipNm_py_ivr_from_uri[] = "from_uri";
char sipNm_py_ivr_r_uri[] = "r_uri";
char sipNm_py_ivr_port[] = "port";
char sipNm_py_ivr_dstip[] = "dstip";
char sipNm_py_ivr_domain[] = "domain";
char sipNm_py_ivr_user[] = "user";
char sipNm_py_ivr_method[] = "method";
char sipNm_py_ivr_cmd[] = "cmd";
char sipNm_py_ivr_AmSipRequest[] = "AmSipRequest";
char sipNm_py_ivr_string[] = "string";

void sipVH_py_ivr_0(sip_gilstate_t sipGILState,PyObject *sipMethod,const AmSipReply& a0)
{
	PyObject *sipResObj = sipCallMethod(0,sipMethod,"O",const_cast<AmSipReply *>(&a0),sipClass_AmSipReply);

	if (!sipResObj || sipParseResult(0,sipMethod,sipResObj,"Z") < 0)
		PyErr_Print();

	Py_XDECREF(sipResObj);
	Py_DECREF(sipMethod);

	SIP_RELEASE_GIL(sipGILState)
}

void sipVH_py_ivr_1(sip_gilstate_t sipGILState,PyObject *sipMethod,const AmSipRequest& a0)
{
	PyObject *sipResObj = sipCallMethod(0,sipMethod,"O",const_cast<AmSipRequest *>(&a0),sipClass_AmSipRequest);

	if (!sipResObj || sipParseResult(0,sipMethod,sipResObj,"Z") < 0)
		PyErr_Print();

	Py_XDECREF(sipResObj);
	Py_DECREF(sipMethod);

	SIP_RELEASE_GIL(sipGILState)
}

void sipVH_py_ivr_2(sip_gilstate_t sipGILState,PyObject *sipMethod,int a0,int a1)
{
	PyObject *sipResObj = sipCallMethod(0,sipMethod,"ii",a0,a1);

	if (!sipResObj || sipParseResult(0,sipMethod,sipResObj,"Z") < 0)
		PyErr_Print();

	Py_XDECREF(sipResObj);
	Py_DECREF(sipMethod);

	SIP_RELEASE_GIL(sipGILState)
}

void sipVH_py_ivr_3(sip_gilstate_t sipGILState,PyObject *sipMethod)
{
	PyObject *sipResObj = sipCallMethod(0,sipMethod,"");

	if (!sipResObj || sipParseResult(0,sipMethod,sipResObj,"Z") < 0)
		PyErr_Print();

	Py_XDECREF(sipResObj);
	Py_DECREF(sipMethod);

	SIP_RELEASE_GIL(sipGILState)
}


static PyObject *func_getHeader(PyObject *,PyObject *sipArgs)
{
	int sipArgsParsed = 0;

	{
		const string * a0;
		int a0IsTemp = 0;
		const string * a1;
		int a1IsTemp = 0;

		if (sipParseArgs(&sipArgsParsed,sipArgs,"M1M1",sipConvertTo_string,&a0,&a0IsTemp,sipConvertTo_string,&a1,&a1IsTemp))
		{
			string *sipRes;

			sipRes = new string(getHeader(*a0,*a1));

			if (a0IsTemp)
				delete const_cast<string *>(a0);

			if (a1IsTemp)
				delete const_cast<string *>(a1);

			PyObject *sipResObj = sipConvertFrom_string(sipRes);
			delete sipRes;

			return sipResObj;
		}
	}

	/* Raise an exception if the arguments couldn't be parsed. */
	sipNoFunction(sipArgsParsed,sipNm_py_ivr_getHeader);

	return NULL;
}


/*
 * This defines each class in this module.  The values are replaced by the
 * proper Python types during the export process.
 */
static sipWrapperType *typesTable[] = {
	(sipWrapperType *)&sipType_IvrDialog,
	(sipWrapperType *)&sipType_AmSipDialog,
	(sipWrapperType *)&sipType_AmSipReply,
	(sipWrapperType *)&sipType_AmSipRequest,
	0
};


/* This defines each mapped type in this module. */
static sipMappedTypeDef *mappedTypesTable[] = {
	&sipMappedType_string,
};


/*
 * This defines the virtual handlers that this module implements and can be
 * used by other modules.
 */
static sipVirtHandlerFunc virtHandlersTable[] = {
	(sipVirtHandlerFunc)sipVH_py_ivr_0,
	(sipVirtHandlerFunc)sipVH_py_ivr_1,
	(sipVirtHandlerFunc)sipVH_py_ivr_2,
	(sipVirtHandlerFunc)sipVH_py_ivr_3,
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_py_ivr = {
	NULL,
	"py_ivr",
	0,
	NULL,
	-1,
	typesTable,
	mappedTypesTable,
	virtHandlersTable,
	NULL,
	{NULL, NULL, NULL, NULL, NULL, NULL},
	NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_py_ivr;


/* The Python module initialisation function. */
PyMODINIT_FUNC initpy_ivr()
{
	static PyMethodDef methods[] = {
		{sipNm_py_ivr_getHeader, func_getHeader, METH_VARARGS, NULL},
		{0, 0, 0, 0}
	};

	/* Initialise the module. */
	PyObject *mod = Py_InitModule(sipModuleAPI_py_ivr.em_name,methods);
	PyObject *mdict = PyModule_GetDict(mod);

	/* Import the SIP module and get it's API. */
	PyObject *sipmod = PyImport_ImportModule("sip");

	if (sipmod == NULL)
		return;

	PyObject *capiobj = PyDict_GetItemString(PyModule_GetDict(sipmod),"_C_API");

	if (capiobj == NULL || !PyCObject_Check(capiobj))
		return;

	sipAPI_py_ivr = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(capiobj));

	/* Export the module and publish it's API. */
	if (sipAPI_py_ivr -> api_export_module(&sipModuleAPI_py_ivr,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,mdict) < 0)
		return;
}
