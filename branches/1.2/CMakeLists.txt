CMAKE_MINIMUM_REQUIRED(VERSION 2.4)

# Don't do automatic escaping of variables
CMAKE_POLICY(SET CMP0005 OLD)

PROJECT (SEMS)

SET(SEMS_MAJOR_VERSION 1)
SET(SEMS_MINOR_VERSION 2)
SET(SEMS_BUILD_VERSION 0)
SET(SEMS_EXTRA_VERSION dev)
SET(SEMS_VERSION
    "${SEMS_MAJOR_VERSION}.${SEMS_MINOR_VERSION}.${SEMS_BUILD_VERSION}")

IF(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE)
	message(FATAL_ERROR "In-source builds are not allowed.
CMake would overwrite all makefiles distributed with SEMS.
Please create a directory and run cmake from there, passing the path
to this source directory as the last argument.
This process created the file `CMakeCache.txt' and the directory `CMakeFiles'.
Please delete them.")
ENDIF(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE)

OPTION(SEMS_USE_SPANDSP       "Build with spandsp" OFF)
OPTION(SEMS_USE_LIBSAMPLERATE "Build with libsamplerate" OFF)
OPTION(SEMS_USE_ZRTP          "Build with ZRTP" OFF)
OPTION(SEMS_USE_MP3           "Build with Lame MP3" OFF)
OPTION(SEMS_USE_ILBC          "Build with bundled iLBC library" ON)
OPTION(SEMS_USE_TTS           "Build with Text-to-speech support (requires Flite)" OFF)
OPTION(SEMS_USE_OPENSSL       "Build with OpenSSL" OFF)
OPTION(SEMS_USE_MONITORING    "Build with monitoring support" OFF)
OPTION(SEMS_USE_IPV6          "Build with IPv6 support" OFF)
OPTION(MAX_RTP_SESSIONS:int   "How many rtp sessions SEMS will handle simultaneously? (default 2048)" 2048)


# add -lm and -lpthread to all targets
SET(CMAKE_DL_LIBS ${CMAKE_DL_LIBS} m pthread)

IF (NOT SEMS_CFG_PREFIX)
	SET(SEMS_CFG_PREFIX "/usr/local")
ENDIF (NOT SEMS_CFG_PREFIX)
MESSAGE(STATUS "SEMS cfg prefix was set to: ${SEMS_CFG_PREFIX}")

IF (NOT SEMS_AUDIO_PREFIX)
	SET(SEMS_AUDIO_PREFIX "/usr/local/lib")
ENDIF (NOT SEMS_AUDIO_PREFIX)
MESSAGE(STATUS "SEMS audio prefix was set to: ${SEMS_AUDIO_PREFIX}")

IF (NOT SEMS_EXEC_PREFIX)
	SET(SEMS_EXEC_PREFIX "/usr/local")
ENDIF (NOT SEMS_EXEC_PREFIX)
MESSAGE(STATUS "SEMS exec prefix was set to: ${SEMS_EXEC_PREFIX}")

IF (NOT SEMS_LIBDIR)
	SET(SEMS_LIBDIR "lib")
ENDIF (NOT SEMS_LIBDIR)
MESSAGE(STATUS "SEMS libdir was set to: ${SEMS_LIBDIR}")

IF (NOT SEMS_DOC_PREFIX)
	SET(SEMS_DOC_PREFIX "/usr/share/doc")
ENDIF (NOT SEMS_DOC_PREFIX)
MESSAGE(STATUS "SEMS doc prefix was set to: ${SEMS_DOC_PREFIX}")

SET(CMAKE_VERBOSE_MAKEFILE ON)

# compile with spandsp DTMF detection? see soft-switch.org
#   this needs a fairly new version of spandsp - tested with 0.0.4pre11
#   will not work with spandsp 0.0.2 .
#   (which means that current debian and gentoo packages don't work)
IF(SEMS_USE_SPANDSP)
	FIND_LIBRARY(SPANDSP_LIBRARIES NAMES spandsp)
	FIND_PATH(SPANDSP_INCLUDE_DIR spandsp.h)
	IF(SPANDSP_INCLUDE_DIR AND SPANDSP_LIBRARIES)
		SET(SPANDSP_FOUND TRUE)
		MESSAGE(STATUS "Found spandsp includes:	${SPANDSP_INCLUDE_DIR}/spandsp.h")
		MESSAGE(STATUS "Found spandsp library: ${SPANDSP_LIBRARIES}")
		MESSAGE(STATUS "Using spandsp: YES")
	ELSE(SPANDSP_INCLUDE_DIR AND SPANDSP_LIBRARIES)
		SET(SPANDSP_FOUND FALSE)
		MESSAGE(FATAL_ERROR "Could NOT find spandsp development files")
	ENDIF(SPANDSP_INCLUDE_DIR AND SPANDSP_LIBRARIES)
ELSE(SEMS_USE_SPANDSP)
	SET(SPANDSP_FOUND FALSE)
	MESSAGE(STATUS "Using spandsp: NO (default)")
ENDIF(SEMS_USE_SPANDSP)

# compile with sample rate conversion from secret rabbit code?
# (see http://www.mega-nerd.com/SRC/)
IF(SEMS_USE_LIBSAMPLERATE)
	FIND_LIBRARY(LIBSAMPLERATE_LIBRARIES NAMES samplerate)
	FIND_PATH(LIBSAMPLERATE_INCLUDE_DIR samplerate.h)
	IF(LIBSAMPLERATE_INCLUDE_DIR AND LIBSAMPLERATE_LIBRARIES)
		SET(LIBSAMPLERATE_FOUND TRUE)
		MESSAGE(STATUS "Found libsamplerate includes: ${LIBSAMPLERATE_INCLUDE_DIR}/samplerate.h")
		MESSAGE(STATUS "Found libsamplerate library: ${LIBSAMPLERATE_LIBRARIES}")
		MESSAGE(STATUS "Using libsamplerate: YES")
	ELSE(LIBSAMPLERATE_INCLUDE_DIR AND LIBSAMPLERATE_LIBRARIES)
		SET(LIBSAMPLERATE_FOUND FALSE)
		MESSAGE(FATAL_ERROR "Could NOT find libsamplerate development files")
	ENDIF(LIBSAMPLERATE_INCLUDE_DIR AND LIBSAMPLERATE_LIBRARIES)
ELSE(SEMS_USE_LIBSAMPLERATE)
	SET(LIBSAMPLERATE_FOUND FALSE)
	MESSAGE(STATUS "Using libsamplerate: NO (default)")
ENDIF(SEMS_USE_LIBSAMPLERATE)

# ZRTP support? (see zfoneproject.com)
IF(SEMS_USE_ZRTP)
	# TODO
	SET(ZRTP_FOUND TRUE)
	MESSAGE(STATUS "Using libzrtp: YES")
	ADD_DEFINITIONS(-DWITH_ZRTP -DBUILD_ZRTP_MUTEXES -DBUILD_DEFAULT_CACHE -DBUILD_DEFAULT_TIMER -DUNIX -DBUILD_ZRTP_MUTEXES)
ELSE(SEMS_USE_ZRTP)
	SET(ZRTP_FOUND FALSE)
	MESSAGE(STATUS "Using libzrtp: NO (default)")
ENDIF(SEMS_USE_ZRTP)

# Lame MP3 support
IF(SEMS_USE_MP3)
	FIND_LIBRARY(LAME_LIBRARIES NAMES mp3lame)
	FIND_PATH(LAME_INCLUDE_DIR lame/lame.h)
	IF(LAME_INCLUDE_DIR AND LAME_LIBRARIES)
		SET(LAME_FOUND TRUE)
		MESSAGE(STATUS "Found lame mp3 includes: ${LAME_INCLUDE_DIR}/lame/lame.h")
		MESSAGE(STATUS "Found lame mp3 library: ${LAME_LIBRARIES}")
		MESSAGE(STATUS "Using lame mp3: YES")
	ELSE(LAME_INCLUDE_DIR AND LAME_LIBRARIES)
		SET(LAME_FOUND FALSE)
		MESSAGE(FATAL_ERROR "Could NOT find lame development files")
	ENDIF(LAME_INCLUDE_DIR AND LAME_LIBRARIES)
ELSE(SEMS_USE_MP3)
	SET(LAME_FOUND FALSE)
	MESSAGE(STATUS "Using lame mp3: NO (default)")
ENDIF(SEMS_USE_MP3)

IF(SEMS_USE_ILBC)
	MESSAGE(STATUS "Using bundled iLBC library: YES (default)")
ELSE(SEMS_USE_ILBC)
	MESSAGE(STATUS "Using bundled iLBC library: NO")
ENDIF(SEMS_USE_ILBC)

# build in support for monitoring?
IF(SEMS_USE_MONITORING)
	MESSAGE(STATUS "Enable monitoring: YES")
	ADD_DEFINITIONS(-DUSE_MONITORING)
ELSE(SEMS_USE_MONITORING)
	MESSAGE(STATUS "Enable monitoring: NO (default)")
ENDIF(SEMS_USE_MONITORING)

IF(SEMS_USE_IPV6)
	MESSAGE(STATUS "Enable IPv6 support: YES")
ELSE(SEMS_USE_IPV6)
	MESSAGE(STATUS "Enable IPv6 support: NO (default)")
ENDIF(SEMS_USE_IPV6)

# Let's try to find GSM library and header files
FIND_LIBRARY(GSM_LIBRARIES NAMES gsm)
FIND_PATH(GSM_INCLUDE_DIR gsm.h)
IF(GSM_INCLUDE_DIR AND GSM_LIBRARIES)
	SET(GSM_FOUND TRUE)
	MESSAGE(STATUS "Found gsm includes: ${GSM_INCLUDE_DIR}/gsm.h")
	MESSAGE(STATUS "Found gsm library: ${GSM_LIBRARIES}")
	MESSAGE(STATUS "Using gsm: YES")
ELSE(GSM_INCLUDE_DIR AND GSM_LIBRARIES)
	SET(GSM_FOUND FALSE)
	MESSAGE(STATUS "Using gsm: NO")
ENDIF (GSM_INCLUDE_DIR AND GSM_LIBRARIES)

# Let's try to find SPEEX library and header files
FIND_LIBRARY(SPEEX_LIBRARIES NAMES speex)
FIND_PATH(SPEEX_INCLUDE_DIR speex/speex.h)
IF(SPEEX_INCLUDE_DIR AND SPEEX_LIBRARIES)
	SET(SPEEX_FOUND TRUE)
	MESSAGE(STATUS "Found speex includes: ${SPEEX_INCLUDE_DIR}/speex/speex.h")
	MESSAGE(STATUS "Found speex library: ${SPEEX_LIBRARIES}")
	MESSAGE(STATUS "Using speex: YES")
ELSE(SPEEX_INCLUDE_DIR AND SPEEX_LIBRARIES)
	SET(SPEEX_FOUND FALSE)
	MESSAGE(STATUS "Using speex: NO")
ENDIF (SPEEX_INCLUDE_DIR AND SPEEX_LIBRARIES)

IF(SEMS_USE_OPENSSL)
	FIND_PACKAGE(OpenSSL REQUIRED QUIETLY)
	MESSAGE(STATUS "Found OpenSSL includes:	${OPENSSL_INCLUDE_DIR}/openssl/ssl.h")
	MESSAGE(STATUS "Found OpenSSL library: ${OPENSSL_LIBRARIES}")
	MESSAGE(STATUS "Using OpenSSL: YES")
ELSE(SEMS_USE_OPENSSL)
	MESSAGE(STATUS "Using OpenSSL: NO (default)")
ENDIF(SEMS_USE_OPENSSL)

# Let's try to find Python development files
FIND_PACKAGE(PythonLibs)
IF(PYTHONLIBS_FOUND OR PYTHON_LIBRARIES)
	SET(PYTHONLIBS_FOUND TRUE)
	GET_FILENAME_COMPONENT(PYTHON_LD_PATH ${PYTHON_LIBRARIES} PATH)
	MESSAGE(STATUS "Found Python includes:	${PYTHON_INCLUDE_PATH}/Python.h")
	MESSAGE(STATUS "Found Python library: ${PYTHON_LIBRARIES}")
	MESSAGE(STATUS "Found Python library path: ${PYTHON_LD_PATH}")
	MESSAGE(STATUS "Using Python: YES")
ELSE(PYTHONLIBS_FOUND OR PYTHON_LIBRARIES)
	MESSAGE(STATUS "Using Python: NO")
ENDIF(PYTHONLIBS_FOUND OR PYTHON_LIBRARIES)

# Let's try to find SIP (Python bindings generator) development files
FIND_PATH(SIP_INCLUDE_DIR sip.h PATHS ${PYTHON_INCLUDE_PATH})
IF(SIP_INCLUDE_DIR)
	SET(SIP_FOUND TRUE)
	MESSAGE(STATUS "Found SIP includes:	${SIP_INCLUDE_DIR}/sip.h")
	MESSAGE(STATUS "Using SIP: YES")
ELSE(SIP_INCLUDE_DIR)
	SET(SIP_FOUND FALSE)
	MESSAGE(STATUS "Using SIP: NO")
ENDIF(SIP_INCLUDE_DIR)

# Let's try to find MySQL++ development files
FIND_LIBRARY(MYSQLPP_LIBRARIES NAMES mysqlpp)
FIND_PATH(MYSQLPP_INCLUDE_DIR mysql++/mysql++.h)
IF(MYSQLPP_INCLUDE_DIR AND MYSQLPP_LIBRARIES)
	SET(MYSQLPP_FOUND TRUE)
	MESSAGE(STATUS "Found MySQL++ includes:	${MYSQLPP_INCLUDE_DIR}/mysql++/mysql++.h")
	MESSAGE(STATUS "Found MySQL++ library: ${MYSQLPP_LIBRARIES}")
	MESSAGE(STATUS "Using MySQL++: YES")
ELSE(MYSQLPP_INCLUDE_DIR AND MYSQLPP_LIBRARIES)
	SET(MYSQLPP_FOUND FALSE)
	MESSAGE(STATUS "Using MySQL++: NO")
ENDIF(MYSQLPP_INCLUDE_DIR AND MYSQLPP_LIBRARIES)

# Let's try to find Flite library and header files
IF(SEMS_USE_TTS)
	FIND_LIBRARY(FLITE_LIBRARIES NAMES flite)
	FIND_PATH(FLITE_INCLUDE_DIR flite/flite.h)
	IF(FLITE_INCLUDE_DIR AND FLITE_LIBRARIES)
		SET(FLITE_FOUND TRUE)
		MESSAGE(STATUS "Found flite includes: ${FLITE_INCLUDE_DIR}/flite/flite.h")
		MESSAGE(STATUS "Found flite library: ${FLITE_LIBRARIES}")
		MESSAGE(STATUS "Using flite: YES")
	ELSE(FLITE_INCLUDE_DIR AND FLITE_LIBRARIES)
		SET(FLITE_FOUND FALSE)
		MESSAGE(FATAL_ERROR "CANNOT find flite devel files")
	ENDIF (FLITE_INCLUDE_DIR AND FLITE_LIBRARIES)
ELSE(SEMS_USE_TTS)
	SET(FLITE_FOUND FALSE)
	MESSAGE(STATUS "Using text-to-speech: NO (default)")
ENDIF(SEMS_USE_TTS)

# Let's try to find mISDN library and header files
FIND_LIBRARY(MISDN_LIBRARIES NAMES mISDN)
FIND_PATH(MISDN_INCLUDE_DIR mISDNuser/mISDNlib.h)
IF(MISDN_INCLUDE_DIR AND MISDN_LIBRARIES)
	SET(MISDN_FOUND TRUE)
	MESSAGE(STATUS "Found mISDN includes: ${MISDN_INCLUDE_DIR}/mISDNuser/mISDNlib.h")
	MESSAGE(STATUS "Found mISDN library: ${MISDN_LIBRARIES}")
	MESSAGE(STATUS "Using mISDN: YES")
ELSE(MISDN_INCLUDE_DIR AND MISDN_LIBRARIES)
	SET(MISDN_FOUND FALSE)
	MESSAGE(STATUS "Using mISDN: NO")
ENDIF (MISDN_INCLUDE_DIR AND MISDN_LIBRARIES)

INCLUDE_DIRECTORIES (${SEMS_SOURCE_DIR}/core/ampi)
INCLUDE_DIRECTORIES (${SEMS_SOURCE_DIR}/core/amci)
INCLUDE_DIRECTORIES (${SEMS_SOURCE_DIR}/core)

CONFIGURE_FILE( sems.h.cmake ${SEMS_SOURCE_DIR}/core/sems.h )

IF(CMAKE_COMPILER_IS_GNUCC)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_THREAD_SAFE -D_REENTRANT -Wall -fPIC -g -O2")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

IF(CMAKE_COMPILER_IS_GNUCXX)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_THREAD_SAFE -D_REENTRANT -Wall -Wno-reorder -fPIC -g -O2")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")
SET(CMAKE_C_FLAGS_DEBUG   "${CMAKE_C_FLAGS_DEBUG}   -D_DEBUG")

SET(CMAKE_SHARED_LIBRARY_PREFIX "")

ADD_SUBDIRECTORY (core)
ADD_SUBDIRECTORY (apps)

#SET_DIRECTORY_PROPERTIES(ADDITIONAL_MAKE_CLEAN_FILES *~)
