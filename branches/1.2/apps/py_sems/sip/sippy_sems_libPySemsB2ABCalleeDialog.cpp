/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Mar 22 01:05:19 2010
 */

#include "sipAPIpy_sems_lib.h"

#line 101 "PySemsB2ABDialog.sip"
#include "../PySemsB2ABDialog.h"
#include "../../../core/AmB2ABSession.h"
#line 13 "sippy_sems_libPySemsB2ABCalleeDialog.cpp"

#line 4 "string.sip"
#include <string>
using std::string;
#line 18 "sippy_sems_libPySemsB2ABCalleeDialog.cpp"
#line 5 "PySemsB2ABDialog.sip"
#include "../../../core/AmB2ABSession.h"
#line 21 "sippy_sems_libPySemsB2ABCalleeDialog.cpp"
#line 117 "PySemsB2ABDialog.sip"
#include "../PySemsB2ABDialog.h"
#line 24 "sippy_sems_libPySemsB2ABCalleeDialog.cpp"
#line 51 "AmAudio.sip"
#include "../../../core/AmAudioFile.h"
#line 27 "sippy_sems_libPySemsB2ABCalleeDialog.cpp"


class sipPySemsB2ABCalleeDialog : public PySemsB2ABCalleeDialog
{
public:
    sipPySemsB2ABCalleeDialog(const string&,AmSessionAudioConnector *);
    virtual ~sipPySemsB2ABCalleeDialog();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtectVirt_onPyB2ABEvent(bool,PySemsB2ABEvent *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void onPyB2ABEvent(PySemsB2ABEvent *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPySemsB2ABCalleeDialog(const sipPySemsB2ABCalleeDialog &);
    sipPySemsB2ABCalleeDialog &operator = (const sipPySemsB2ABCalleeDialog &);

    char sipPyMethods[1];
};

sipPySemsB2ABCalleeDialog::sipPySemsB2ABCalleeDialog(const string& a0,AmSessionAudioConnector *a1): PySemsB2ABCalleeDialog(a0,a1), sipPySelf(0)
{
    sipTrace(SIP_TRACE_CTORS,"sipPySemsB2ABCalleeDialog::sipPySemsB2ABCalleeDialog(const string&,AmSessionAudioConnector *) (this=0x%08x)\n",this);

    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPySemsB2ABCalleeDialog::~sipPySemsB2ABCalleeDialog()
{
    sipTrace(SIP_TRACE_DTORS,"sipPySemsB2ABCalleeDialog::~sipPySemsB2ABCalleeDialog() (this=0x%08x)\n",this);

    sipCommonDtor(sipPySelf);
}

void sipPySemsB2ABCalleeDialog::onPyB2ABEvent(PySemsB2ABEvent *a0)
{
    sipTrace(SIP_TRACE_CATCHERS,"void sipPySemsB2ABCalleeDialog::onPyB2ABEvent(PySemsB2ABEvent *) (this=0x%08x)\n",this);

    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_onPyB2ABEvent);

    if (!meth)
    {
        PySemsB2ABCalleeDialog::onPyB2ABEvent(a0);
        return;
    }

    extern void sipVH_py_sems_lib_0(sip_gilstate_t,PyObject *,PySemsB2ABEvent *);

    sipVH_py_sems_lib_0(sipGILState,meth,a0);
}

void sipPySemsB2ABCalleeDialog::sipProtectVirt_onPyB2ABEvent(bool sipSelfWasArg,PySemsB2ABEvent *a0)
{
    (sipSelfWasArg ? PySemsB2ABCalleeDialog::onPyB2ABEvent(a0) : onPyB2ABEvent(a0));
}


extern "C" {static PyObject *meth_PySemsB2ABCalleeDialog_onPyB2ABEvent(PyObject *, PyObject *);}
static PyObject *meth_PySemsB2ABCalleeDialog_onPyB2ABEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_PySemsB2ABCalleeDialog_onPyB2ABEvent()\n");

    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        PySemsB2ABEvent * a0;
        sipPySemsB2ABCalleeDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ<",&sipSelf,sipType_PySemsB2ABCalleeDialog,&sipCpp,sipType_PySemsB2ABEvent,&a0))
        {
            sipCpp->sipProtectVirt_onPyB2ABEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_PySemsB2ABCalleeDialog,sipName_onPyB2ABEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_PySemsB2ABCalleeDialog(void *, const sipTypeDef *);}
static void *cast_PySemsB2ABCalleeDialog(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_PySemsB2ABCalleeDialog)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_AmB2ABCalleeSession)->ctd_cast((AmB2ABCalleeSession *)(PySemsB2ABCalleeDialog *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_PySemsB2ABCalleeDialog(void *, int);}
static void release_PySemsB2ABCalleeDialog(void *sipCppV,int state)
{
    if (state & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipPySemsB2ABCalleeDialog *>(sipCppV);
    else
        delete reinterpret_cast<PySemsB2ABCalleeDialog *>(sipCppV);
}


extern "C" {static void dealloc_PySemsB2ABCalleeDialog(sipSimpleWrapper *);}
static void dealloc_PySemsB2ABCalleeDialog(sipSimpleWrapper *sipSelf)
{
    sipTrace(SIP_TRACE_DEALLOCS,"dealloc_PySemsB2ABCalleeDialog()\n");

    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipPySemsB2ABCalleeDialog *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_PySemsB2ABCalleeDialog(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_PySemsB2ABCalleeDialog(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_PySemsB2ABCalleeDialog(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipPySemsB2ABCalleeDialog *sipCpp = 0;

    sipTrace(SIP_TRACE_INITS,"init_PySemsB2ABCalleeDialog()\n");

    if (!sipCpp)
    {
        const string * a0;
        int a0State = 0;
        AmSessionAudioConnector * a1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1J8",sipType_string,&a0,&a0State,sipType_AmSessionAudioConnector,&a1))
        {
            sipCpp = new sipPySemsB2ABCalleeDialog(*a0,a1);

            sipReleaseType(const_cast<string *>(a0),sipType_string,a0State);
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_PySemsB2ABCalleeDialog[] = {{4, 255, 1}};


static PyMethodDef methods_PySemsB2ABCalleeDialog[] = {
    {SIP_MLNAME_CAST(sipName_onPyB2ABEvent), meth_PySemsB2ABCalleeDialog_onPyB2ABEvent, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_py_sems_lib_PySemsB2ABCalleeDialog = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_PySemsB2ABCalleeDialog,
        {0}
    },
    {
        sipNameNr_PySemsB2ABCalleeDialog,
        {0, 0, 1},
        1, methods_PySemsB2ABCalleeDialog,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_PySemsB2ABCalleeDialog,
    0,
    init_PySemsB2ABCalleeDialog,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_PySemsB2ABCalleeDialog,
    0,
    0,
    0,
    release_PySemsB2ABCalleeDialog,
    cast_PySemsB2ABCalleeDialog,
    0,
    0,
    0
};
