/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Mar 22 01:05:19 2010
 */

#include "sipAPIpy_sems_lib.h"

#line 81 "PySemsB2ABDialog.sip"
#include "../../../core/AmB2ABSession.h"
#line 12 "sippy_sems_libAmB2ABCalleeSession.cpp"

#line 4 "string.sip"
#include <string>
using std::string;
#line 17 "sippy_sems_libAmB2ABCalleeSession.cpp"
#line 5 "PySemsB2ABDialog.sip"
#include "../../../core/AmB2ABSession.h"
#line 20 "sippy_sems_libAmB2ABCalleeSession.cpp"
#line 51 "AmAudio.sip"
#include "../../../core/AmAudioFile.h"
#line 23 "sippy_sems_libAmB2ABCalleeSession.cpp"


extern "C" {static PyObject *meth_AmB2ABCalleeSession_connectSession(PyObject *, PyObject *);}
static PyObject *meth_AmB2ABCalleeSession_connectSession(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmB2ABCalleeSession_connectSession()\n");

    int sipArgsParsed = 0;

    {
        AmB2ABCalleeSession *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmB2ABCalleeSession,&sipCpp))
        {
            sipCpp->connectSession();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmB2ABCalleeSession,sipName_connectSession);

    return NULL;
}


extern "C" {static PyObject *meth_AmB2ABCalleeSession_disconnectSession(PyObject *, PyObject *);}
static PyObject *meth_AmB2ABCalleeSession_disconnectSession(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmB2ABCalleeSession_disconnectSession()\n");

    int sipArgsParsed = 0;

    {
        AmB2ABCalleeSession *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmB2ABCalleeSession,&sipCpp))
        {
            sipCpp->disconnectSession();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmB2ABCalleeSession,sipName_disconnectSession);

    return NULL;
}


extern "C" {static PyObject *meth_AmB2ABCalleeSession_setInput(PyObject *, PyObject *);}
static PyObject *meth_AmB2ABCalleeSession_setInput(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmB2ABCalleeSession_setInput()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile * a0;
        AmB2ABCalleeSession *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_AmB2ABCalleeSession,&sipCpp,sipType_AmAudioFile,&a0))
        {
            sipCpp->setInput(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmB2ABCalleeSession,sipName_setInput);

    return NULL;
}


extern "C" {static PyObject *meth_AmB2ABCalleeSession_setOutput(PyObject *, PyObject *);}
static PyObject *meth_AmB2ABCalleeSession_setOutput(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmB2ABCalleeSession_setOutput()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile * a0;
        AmB2ABCalleeSession *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_AmB2ABCalleeSession,&sipCpp,sipType_AmAudioFile,&a0))
        {
            sipCpp->setOutput(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmB2ABCalleeSession,sipName_setOutput);

    return NULL;
}


extern "C" {static PyObject *meth_AmB2ABCalleeSession_setInOut(PyObject *, PyObject *);}
static PyObject *meth_AmB2ABCalleeSession_setInOut(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmB2ABCalleeSession_setInOut()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile * a0;
        AmAudioFile * a1;
        AmB2ABCalleeSession *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J8",&sipSelf,sipType_AmB2ABCalleeSession,&sipCpp,sipType_AmAudioFile,&a0,sipType_AmAudioFile,&a1))
        {
            sipCpp->setInOut(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmB2ABCalleeSession,sipName_setInOut);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_AmB2ABCalleeSession(void *, const sipTypeDef *);}
static void *cast_AmB2ABCalleeSession(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_AmB2ABCalleeSession)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_AmB2ABCalleeSession(void *, int);}
static void release_AmB2ABCalleeSession(void *sipCppV,int)
{
    delete reinterpret_cast<AmB2ABCalleeSession *>(sipCppV);
}


extern "C" {static void dealloc_AmB2ABCalleeSession(sipSimpleWrapper *);}
static void dealloc_AmB2ABCalleeSession(sipSimpleWrapper *sipSelf)
{
    sipTrace(SIP_TRACE_DEALLOCS,"dealloc_AmB2ABCalleeSession()\n");

    if (sipIsPyOwned(sipSelf))
    {
        release_AmB2ABCalleeSession(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_AmB2ABCalleeSession(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_AmB2ABCalleeSession(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    AmB2ABCalleeSession *sipCpp = 0;

    sipTrace(SIP_TRACE_INITS,"init_AmB2ABCalleeSession()\n");

    if (!sipCpp)
    {
        const string * a0;
        int a0State = 0;
        AmSessionAudioConnector * a1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1J8",sipType_string,&a0,&a0State,sipType_AmSessionAudioConnector,&a1))
        {
            sipCpp = new AmB2ABCalleeSession(*a0,a1);

            sipReleaseType(const_cast<string *>(a0),sipType_string,a0State);
        }
    }

    return sipCpp;
}


static PyMethodDef methods_AmB2ABCalleeSession[] = {
    {SIP_MLNAME_CAST(sipName_connectSession), meth_AmB2ABCalleeSession_connectSession, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectSession), meth_AmB2ABCalleeSession_disconnectSession, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setInOut), meth_AmB2ABCalleeSession_setInOut, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setInput), meth_AmB2ABCalleeSession_setInput, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOutput), meth_AmB2ABCalleeSession_setOutput, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_py_sems_lib_AmB2ABCalleeSession = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_AmB2ABCalleeSession,
        {0}
    },
    {
        sipNameNr_AmB2ABCalleeSession,
        {0, 0, 1},
        5, methods_AmB2ABCalleeSession,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    0,
    0,
    init_AmB2ABCalleeSession,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_AmB2ABCalleeSession,
    0,
    0,
    0,
    release_AmB2ABCalleeSession,
    cast_AmB2ABCalleeSession,
    0,
    0,
    0
};
