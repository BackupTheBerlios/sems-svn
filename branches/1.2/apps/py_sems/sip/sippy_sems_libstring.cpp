/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Mar 22 01:05:19 2010
 */

#include "sipAPIpy_sems_lib.h"

#line 4 "string.sip"
#include <string>
using std::string;
#line 13 "sippy_sems_libstring.cpp"



extern "C" {static void assign_string(void *, SIP_SSIZE_T, const void *);}
static void assign_string(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<string *>(sipDst)[sipDstIdx] = *reinterpret_cast<const string *>(sipSrc);
}


extern "C" {static void *array_string(SIP_SSIZE_T);}
static void *array_string(SIP_SSIZE_T sipNrElem)
{
    return new string[sipNrElem];
}


extern "C" {static void *copy_string(const void *, SIP_SSIZE_T);}
static void *copy_string(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new string(reinterpret_cast<const string *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_string(void *, int);}
static void release_string(void *ptr, int)
{
    delete reinterpret_cast<string *>(ptr);
}



extern "C" {static int convertTo_string(PyObject *, void **, int *, PyObject *);}
static int convertTo_string(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *)
{
    string **sipCppPtr = reinterpret_cast<string **>(sipCppPtrV);

#line 14 "string.sip"
         // Allow a Python string whenever a string is expected.
         if (sipIsErr == NULL)
             return PyString_Check(sipPy);
         if (sipPy == Py_None) {
             *sipCppPtr = NULL;
             return 0;
         }
         if (PyString_Check(sipPy)) {
             *sipCppPtr = new std::string(PyString_AS_STRING(sipPy));
             return 0;
         }
#if  SIP_VERSION < 0x040901
         *sipCppPtr = (std::string *)sipForceConvertToType(sipPy, sipType_string, NULL, SIP_NO_CONVERTORS, NULL, sipIsErr);
#else
         *sipCppPtr = (std::string *)sipForceConvertToType(sipPy, sipType_string, NULL, SIP_NO_CONVERTORS, NULL, sipIsErr);
#endif
         return 1;
#line 70 "sippy_sems_libstring.cpp"
}


extern "C" {static PyObject *convertFrom_string(void *, PyObject *);}
static PyObject *convertFrom_string(void *sipCppV,PyObject *)
{
   string *sipCpp = reinterpret_cast<string *>(sipCppV);

#line 9 "string.sip"
     const char *s = sipCpp->c_str();
     return PyString_FromString(s);
#line 82 "sippy_sems_libstring.cpp"
}


sipMappedTypeDef sipTypeDef_py_sems_lib_string = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_string,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_string,
    array_string,
    copy_string,
    release_string,
    convertTo_string,
    convertFrom_string
};
