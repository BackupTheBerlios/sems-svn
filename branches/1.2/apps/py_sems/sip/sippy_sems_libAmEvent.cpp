/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Mar 22 01:05:19 2010
 */

#include "sipAPIpy_sems_lib.h"

#line 5 "AmAudio.sip"
#include "../../../core/AmEvent.h"
#line 12 "sippy_sems_libAmEvent.cpp"



class sipAmEvent : public AmEvent
{
public:
    sipAmEvent(int);
    sipAmEvent(const AmEvent&);
    ~sipAmEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipAmEvent(const sipAmEvent &);
    sipAmEvent &operator = (const sipAmEvent &);
};

sipAmEvent::sipAmEvent(int a0): AmEvent(a0), sipPySelf(0)
{
    sipTrace(SIP_TRACE_CTORS,"sipAmEvent::sipAmEvent(int) (this=0x%08x)\n",this);

}

sipAmEvent::sipAmEvent(const AmEvent& a0): AmEvent(a0), sipPySelf(0)
{
    sipTrace(SIP_TRACE_CTORS,"sipAmEvent::sipAmEvent(const AmEvent&) (this=0x%08x)\n",this);

}

sipAmEvent::~sipAmEvent()
{
    sipTrace(SIP_TRACE_DTORS,"sipAmEvent::~sipAmEvent() (this=0x%08x)\n",this);

    sipCommonDtor(sipPySelf);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_AmEvent(void *, const sipTypeDef *);}
static void *cast_AmEvent(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_AmEvent)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_AmEvent(void *, int);}
static void release_AmEvent(void *sipCppV,int state)
{
    if (state & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipAmEvent *>(sipCppV);
    else
        delete reinterpret_cast<AmEvent *>(sipCppV);
}


extern "C" {static void dealloc_AmEvent(sipSimpleWrapper *);}
static void dealloc_AmEvent(sipSimpleWrapper *sipSelf)
{
    sipTrace(SIP_TRACE_DEALLOCS,"dealloc_AmEvent()\n");

    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipAmEvent *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_AmEvent(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_AmEvent(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_AmEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipAmEvent *sipCpp = 0;

    sipTrace(SIP_TRACE_INITS,"init_AmEvent()\n");

    if (!sipCpp)
    {
        int a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"i",&a0))
        {
            sipCpp = new sipAmEvent(a0);
        }
    }

    if (!sipCpp)
    {
        const AmEvent * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_AmEvent,&a0))
        {
            sipCpp = new sipAmEvent(*a0);
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


extern "C" {static PyObject *varget_AmEvent_event_id(void *, PyObject *);}
static PyObject *varget_AmEvent_event_id(void *sipSelf, PyObject *)
{
    int sipVal;
    AmEvent *sipCpp = reinterpret_cast<AmEvent *>(sipSelf);

    sipVal = sipCpp->event_id;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_AmEvent_event_id(void *, PyObject *, PyObject *);}
static int varset_AmEvent_event_id(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    AmEvent *sipCpp = reinterpret_cast<AmEvent *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->event_id = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_AmEvent_processed(void *, PyObject *);}
static PyObject *varget_AmEvent_processed(void *sipSelf, PyObject *)
{
    bool sipVal;
    AmEvent *sipCpp = reinterpret_cast<AmEvent *>(sipSelf);

    sipVal = sipCpp->processed;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_AmEvent_processed(void *, PyObject *, PyObject *);}
static int varset_AmEvent_processed(void *sipSelf, PyObject *sipPy, PyObject *)
{
    bool sipVal;
    AmEvent *sipCpp = reinterpret_cast<AmEvent *>(sipSelf);

    sipVal = (bool)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->processed = sipVal;

    return 0;
}

sipVariableDef variables_AmEvent[] = {
    {sipName_event_id, varget_AmEvent_event_id, varset_AmEvent_event_id, 0},
    {sipName_processed, varget_AmEvent_processed, varset_AmEvent_processed, 0},
};


sipClassTypeDef sipTypeDef_py_sems_lib_AmEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_AmEvent,
        {0}
    },
    {
        sipNameNr_AmEvent,
        {0, 0, 1},
        0, 0,
        0, 0,
        2, variables_AmEvent,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    0,
    0,
    init_AmEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_AmEvent,
    0,
    0,
    0,
    release_AmEvent,
    cast_AmEvent,
    0,
    0,
    0
};
