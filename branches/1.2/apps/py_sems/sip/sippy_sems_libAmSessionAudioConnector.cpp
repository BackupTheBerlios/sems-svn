/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Mar 22 01:05:19 2010
 */

#include "sipAPIpy_sems_lib.h"

#line 5 "PySemsB2ABDialog.sip"
#include "../../../core/AmB2ABSession.h"
#line 12 "sippy_sems_libAmSessionAudioConnector.cpp"



extern "C" {static PyObject *meth_AmSessionAudioConnector_block(PyObject *, PyObject *);}
static PyObject *meth_AmSessionAudioConnector_block(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSessionAudioConnector_block()\n");

    int sipArgsParsed = 0;

    {
        AmSessionAudioConnector *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmSessionAudioConnector,&sipCpp))
        {
            sipCpp->block();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSessionAudioConnector,sipName_block);

    return NULL;
}


extern "C" {static PyObject *meth_AmSessionAudioConnector_release(PyObject *, PyObject *);}
static PyObject *meth_AmSessionAudioConnector_release(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSessionAudioConnector_release()\n");

    int sipArgsParsed = 0;

    {
        AmSessionAudioConnector *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmSessionAudioConnector,&sipCpp))
        {
            sipCpp->release();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSessionAudioConnector,sipName_release);

    return NULL;
}


extern "C" {static PyObject *meth_AmSessionAudioConnector_waitReleased(PyObject *, PyObject *);}
static PyObject *meth_AmSessionAudioConnector_waitReleased(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSessionAudioConnector_waitReleased()\n");

    int sipArgsParsed = 0;

    {
        AmSessionAudioConnector *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmSessionAudioConnector,&sipCpp))
        {
            sipCpp->waitReleased();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSessionAudioConnector,sipName_waitReleased);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_AmSessionAudioConnector(void *, const sipTypeDef *);}
static void *cast_AmSessionAudioConnector(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_AmSessionAudioConnector)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_AmSessionAudioConnector(void *, int);}
static void release_AmSessionAudioConnector(void *sipCppV,int)
{
    delete reinterpret_cast<AmSessionAudioConnector *>(sipCppV);
}


extern "C" {static void dealloc_AmSessionAudioConnector(sipSimpleWrapper *);}
static void dealloc_AmSessionAudioConnector(sipSimpleWrapper *sipSelf)
{
    sipTrace(SIP_TRACE_DEALLOCS,"dealloc_AmSessionAudioConnector()\n");

    if (sipIsPyOwned(sipSelf))
    {
        release_AmSessionAudioConnector(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_AmSessionAudioConnector(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_AmSessionAudioConnector(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    AmSessionAudioConnector *sipCpp = 0;

    sipTrace(SIP_TRACE_INITS,"init_AmSessionAudioConnector()\n");

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            sipCpp = new AmSessionAudioConnector();
        }
    }

    return sipCpp;
}


static PyMethodDef methods_AmSessionAudioConnector[] = {
    {SIP_MLNAME_CAST(sipName_block), meth_AmSessionAudioConnector_block, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_release), meth_AmSessionAudioConnector_release, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_waitReleased), meth_AmSessionAudioConnector_waitReleased, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_py_sems_lib_AmSessionAudioConnector = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_AmSessionAudioConnector,
        {0}
    },
    {
        sipNameNr_AmSessionAudioConnector,
        {0, 0, 1},
        3, methods_AmSessionAudioConnector,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    0,
    0,
    init_AmSessionAudioConnector,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_AmSessionAudioConnector,
    0,
    0,
    0,
    release_AmSessionAudioConnector,
    cast_AmSessionAudioConnector,
    0,
    0,
    0
};
