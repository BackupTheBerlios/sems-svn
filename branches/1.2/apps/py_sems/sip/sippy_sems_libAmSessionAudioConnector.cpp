/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.5.2 (4.5.2) on Mon Dec  8 15:20:56 2008
 */

#include "sipAPIpy_sems_lib.h"
#include "sippy_sems_libAmSessionAudioConnector.h"

#include "sippy_sems_libAmSessionAudioConnector.h"



extern "C" {static PyObject *meth_AmSessionAudioConnector_block(PyObject *, PyObject *);}
static PyObject *meth_AmSessionAudioConnector_block(PyObject *sipSelf,PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSessionAudioConnector_block()\n");

    int sipArgsParsed = 0;

    {
        AmSessionAudioConnector *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipClass_AmSessionAudioConnector,&sipCpp))
        {
            sipCpp->block();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_py_sems_lib_AmSessionAudioConnector,sipNm_py_sems_lib_block);

    return NULL;
}


extern "C" {static PyObject *meth_AmSessionAudioConnector_release(PyObject *, PyObject *);}
static PyObject *meth_AmSessionAudioConnector_release(PyObject *sipSelf,PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSessionAudioConnector_release()\n");

    int sipArgsParsed = 0;

    {
        AmSessionAudioConnector *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipClass_AmSessionAudioConnector,&sipCpp))
        {
            sipCpp->release();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_py_sems_lib_AmSessionAudioConnector,sipNm_py_sems_lib_release);

    return NULL;
}


extern "C" {static PyObject *meth_AmSessionAudioConnector_waitReleased(PyObject *, PyObject *);}
static PyObject *meth_AmSessionAudioConnector_waitReleased(PyObject *sipSelf,PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSessionAudioConnector_waitReleased()\n");

    int sipArgsParsed = 0;

    {
        AmSessionAudioConnector *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipClass_AmSessionAudioConnector,&sipCpp))
        {
            sipCpp->waitReleased();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_py_sems_lib_AmSessionAudioConnector,sipNm_py_sems_lib_waitReleased);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_AmSessionAudioConnector(void *, sipWrapperType *);}
static void *cast_AmSessionAudioConnector(void *ptr,sipWrapperType *targetClass)
{
    if (targetClass == sipClass_AmSessionAudioConnector)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_AmSessionAudioConnector(void *, int);}
static void release_AmSessionAudioConnector(void *ptr,int)
{
    delete reinterpret_cast<AmSessionAudioConnector *>(ptr);
}


extern "C" {static void dealloc_AmSessionAudioConnector(sipWrapper *);}
static void dealloc_AmSessionAudioConnector(sipWrapper *sipSelf)
{
    sipTrace(SIP_TRACE_DEALLOCS,"dealloc_AmSessionAudioConnector()\n");

    if (sipIsPyOwned(sipSelf))
    {
        release_AmSessionAudioConnector(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_AmSessionAudioConnector(sipWrapper *, PyObject *, sipWrapper **, int *);}
static void *init_AmSessionAudioConnector(sipWrapper *,PyObject *sipArgs,sipWrapper **,int *sipArgsParsed)
{
    AmSessionAudioConnector *sipCpp = 0;

    sipTrace(SIP_TRACE_INITS,"init_AmSessionAudioConnector()\n");

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            sipCpp = new AmSessionAudioConnector();
        }
    }

    return sipCpp;
}


extern "C" {static void *forceConvertTo_AmSessionAudioConnector(PyObject *, int *);}
static void *forceConvertTo_AmSessionAudioConnector(PyObject *valobj,int *iserrp)
{
    if (*iserrp || valobj == NULL)
        return NULL;

    if (valobj == Py_None || sipIsSubClassInstance(valobj,sipClass_AmSessionAudioConnector))
        return sipConvertToCpp(valobj,sipClass_AmSessionAudioConnector,iserrp);

    sipBadClass(sipNm_py_sems_lib_AmSessionAudioConnector);

    *iserrp = 1;

    return NULL;
}


static PyMethodDef methods_AmSessionAudioConnector[] = {
    {sipNm_py_sems_lib_block, meth_AmSessionAudioConnector_block, METH_VARARGS, NULL},
    {sipNm_py_sems_lib_release, meth_AmSessionAudioConnector_release, METH_VARARGS, NULL},
    {sipNm_py_sems_lib_waitReleased, meth_AmSessionAudioConnector_waitReleased, METH_VARARGS, NULL}
};


sipTypeDef sipType_py_sems_lib_AmSessionAudioConnector = {
    0,
    0,
    "py_sems_lib.AmSessionAudioConnector",
    0,
    {0, 0, 1},
    0,
    0,
    3, methods_AmSessionAudioConnector,
    0, 0,
    0,
    init_AmSessionAudioConnector,
    0,
    0,
    0,
    0,
    0,
    0,
    dealloc_AmSessionAudioConnector,
    cast_AmSessionAudioConnector,
    release_AmSessionAudioConnector,
    forceConvertTo_AmSessionAudioConnector,
    0,
    0,
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    0
};
