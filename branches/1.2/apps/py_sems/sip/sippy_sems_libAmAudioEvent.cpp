/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Mar 22 01:05:19 2010
 */

#include "sipAPIpy_sems_lib.h"

#line 29 "AmAudio.sip"
#include "../../../core/AmAudio.h"
#line 12 "sippy_sems_libAmAudioEvent.cpp"



class sipAmAudioEvent : public AmAudioEvent
{
public:
    sipAmAudioEvent(int);
    sipAmAudioEvent(const AmAudioEvent&);
    ~sipAmAudioEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipAmAudioEvent(const sipAmAudioEvent &);
    sipAmAudioEvent &operator = (const sipAmAudioEvent &);
};

sipAmAudioEvent::sipAmAudioEvent(int a0): AmAudioEvent(a0), sipPySelf(0)
{
    sipTrace(SIP_TRACE_CTORS,"sipAmAudioEvent::sipAmAudioEvent(int) (this=0x%08x)\n",this);

}

sipAmAudioEvent::sipAmAudioEvent(const AmAudioEvent& a0): AmAudioEvent(a0), sipPySelf(0)
{
    sipTrace(SIP_TRACE_CTORS,"sipAmAudioEvent::sipAmAudioEvent(const AmAudioEvent&) (this=0x%08x)\n",this);

}

sipAmAudioEvent::~sipAmAudioEvent()
{
    sipTrace(SIP_TRACE_DTORS,"sipAmAudioEvent::~sipAmAudioEvent() (this=0x%08x)\n",this);

    sipCommonDtor(sipPySelf);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_AmAudioEvent(void *, const sipTypeDef *);}
static void *cast_AmAudioEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_AmAudioEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_AmEvent)->ctd_cast((AmEvent *)(AmAudioEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_AmAudioEvent(void *, int);}
static void release_AmAudioEvent(void *sipCppV,int state)
{
    if (state & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipAmAudioEvent *>(sipCppV);
    else
        delete reinterpret_cast<AmAudioEvent *>(sipCppV);
}


extern "C" {static void dealloc_AmAudioEvent(sipSimpleWrapper *);}
static void dealloc_AmAudioEvent(sipSimpleWrapper *sipSelf)
{
    sipTrace(SIP_TRACE_DEALLOCS,"dealloc_AmAudioEvent()\n");

    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipAmAudioEvent *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_AmAudioEvent(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_AmAudioEvent(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_AmAudioEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipAmAudioEvent *sipCpp = 0;

    sipTrace(SIP_TRACE_INITS,"init_AmAudioEvent()\n");

    if (!sipCpp)
    {
        int a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"i",&a0))
        {
            sipCpp = new sipAmAudioEvent(a0);
        }
    }

    if (!sipCpp)
    {
        const AmAudioEvent * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_AmAudioEvent,&a0))
        {
            sipCpp = new sipAmAudioEvent(*a0);
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_AmAudioEvent[] = {{5, 255, 1}};

static sipEnumMemberDef enummembers_AmAudioEvent[] = {
    {sipName_cleared, AmAudioEvent::cleared, 1},
    {sipName_noAudio, AmAudioEvent::noAudio, 1},
};


sipClassTypeDef sipTypeDef_py_sems_lib_AmAudioEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_AmAudioEvent,
        {0}
    },
    {
        sipNameNr_AmAudioEvent,
        {0, 0, 1},
        0, 0,
        2, enummembers_AmAudioEvent,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_AmAudioEvent,
    0,
    init_AmAudioEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_AmAudioEvent,
    0,
    0,
    0,
    release_AmAudioEvent,
    cast_AmAudioEvent,
    0,
    0,
    0
};
