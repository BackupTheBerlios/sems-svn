/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Mar 22 01:05:19 2010
 */

#include "sipAPIpy_sems_lib.h"

#line 6 "AmSipDialog.sip"
#include "../../../core/AmSipDialog.h"
#line 12 "sippy_sems_libAmSipDialog.cpp"

#line 4 "string.sip"
#include <string>
using std::string;
#line 17 "sippy_sems_libAmSipDialog.cpp"
#line 6 "AmSipRequest.sip"
#include "../../../core/AmSipMsg.h"
#line 20 "sippy_sems_libAmSipDialog.cpp"
#line 6 "AmSipReply.sip"
#include "../../../core/AmSipMsg.h"
#line 23 "sippy_sems_libAmSipDialog.cpp"


extern "C" {static PyObject *meth_AmSipDialog_getRoute(PyObject *, PyObject *);}
static PyObject *meth_AmSipDialog_getRoute(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSipDialog_getRoute()\n");

    int sipArgsParsed = 0;

    {
        AmSipDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmSipDialog,&sipCpp))
        {
            string *sipRes;

            sipRes = new string(sipCpp->getRoute());

            return sipConvertFromNewType(sipRes,sipType_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSipDialog,sipName_getRoute);

    return NULL;
}


extern "C" {static PyObject *meth_AmSipDialog_setRoute(PyObject *, PyObject *);}
static PyObject *meth_AmSipDialog_setRoute(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSipDialog_setRoute()\n");

    int sipArgsParsed = 0;

    {
        const string * a0;
        int a0State = 0;
        AmSipDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_AmSipDialog,&sipCpp,sipType_string,&a0,&a0State))
        {
            sipCpp->setRoute(*a0);

            sipReleaseType(const_cast<string *>(a0),sipType_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSipDialog,sipName_setRoute);

    return NULL;
}


extern "C" {static PyObject *meth_AmSipDialog_getUACTransPending(PyObject *, PyObject *);}
static PyObject *meth_AmSipDialog_getUACTransPending(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSipDialog_getUACTransPending()\n");

    int sipArgsParsed = 0;

    {
        AmSipDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmSipDialog,&sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getUACTransPending();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSipDialog,sipName_getUACTransPending);

    return NULL;
}


extern "C" {static PyObject *meth_AmSipDialog_getStatus(PyObject *, PyObject *);}
static PyObject *meth_AmSipDialog_getStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSipDialog_getStatus()\n");

    int sipArgsParsed = 0;

    {
        AmSipDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmSipDialog,&sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getStatus();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSipDialog,sipName_getStatus);

    return NULL;
}


extern "C" {static PyObject *meth_AmSipDialog_getContactHdr(PyObject *, PyObject *);}
static PyObject *meth_AmSipDialog_getContactHdr(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSipDialog_getContactHdr()\n");

    int sipArgsParsed = 0;

    {
        AmSipDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmSipDialog,&sipCpp))
        {
            string *sipRes;

            sipRes = new string(sipCpp->getContactHdr());

            return sipConvertFromNewType(sipRes,sipType_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSipDialog,sipName_getContactHdr);

    return NULL;
}


extern "C" {static PyObject *meth_AmSipDialog_updateStatus(PyObject *, PyObject *);}
static PyObject *meth_AmSipDialog_updateStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSipDialog_updateStatus()\n");

    int sipArgsParsed = 0;

    {
        const AmSipRequest * a0;
        AmSipDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_AmSipDialog,&sipCpp,sipType_AmSipRequest,&a0))
        {
            sipCpp->updateStatus(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const AmSipReply * a0;
        AmSipDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_AmSipDialog,&sipCpp,sipType_AmSipReply,&a0))
        {
            sipCpp->updateStatus(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSipDialog,sipName_updateStatus);

    return NULL;
}


extern "C" {static PyObject *meth_AmSipDialog_reply(PyObject *, PyObject *);}
static PyObject *meth_AmSipDialog_reply(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSipDialog_reply()\n");

    int sipArgsParsed = 0;

    {
        const AmSipRequest * a0;
        unsigned a1;
        const string * a2;
        int a2State = 0;
        const string * a3;
        int a3State = 0;
        const string * a4;
        int a4State = 0;
        const string * a5;
        int a5State = 0;
        AmSipDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9uJ1J1J1J1",&sipSelf,sipType_AmSipDialog,&sipCpp,sipType_AmSipRequest,&a0,&a1,sipType_string,&a2,&a2State,sipType_string,&a3,&a3State,sipType_string,&a4,&a4State,sipType_string,&a5,&a5State))
        {
            int sipRes;

            sipRes = sipCpp->reply(*a0,a1,*a2,*a3,*a4,*a5);

            sipReleaseType(const_cast<string *>(a2),sipType_string,a2State);
            sipReleaseType(const_cast<string *>(a3),sipType_string,a3State);
            sipReleaseType(const_cast<string *>(a4),sipType_string,a4State);
            sipReleaseType(const_cast<string *>(a5),sipType_string,a5State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSipDialog,sipName_reply);

    return NULL;
}


extern "C" {static PyObject *meth_AmSipDialog_sendRequest(PyObject *, PyObject *);}
static PyObject *meth_AmSipDialog_sendRequest(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSipDialog_sendRequest()\n");

    int sipArgsParsed = 0;

    {
        const string * a0;
        int a0State = 0;
        const string * a1;
        int a1State = 0;
        const string * a2;
        int a2State = 0;
        const string * a3;
        int a3State = 0;
        AmSipDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1J1J1",&sipSelf,sipType_AmSipDialog,&sipCpp,sipType_string,&a0,&a0State,sipType_string,&a1,&a1State,sipType_string,&a2,&a2State,sipType_string,&a3,&a3State))
        {
            int sipRes;

            sipRes = sipCpp->sendRequest(*a0,*a1,*a2,*a3);

            sipReleaseType(const_cast<string *>(a0),sipType_string,a0State);
            sipReleaseType(const_cast<string *>(a1),sipType_string,a1State);
            sipReleaseType(const_cast<string *>(a2),sipType_string,a2State);
            sipReleaseType(const_cast<string *>(a3),sipType_string,a3State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSipDialog,sipName_sendRequest);

    return NULL;
}


extern "C" {static PyObject *meth_AmSipDialog_bye(PyObject *, PyObject *);}
static PyObject *meth_AmSipDialog_bye(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSipDialog_bye()\n");

    int sipArgsParsed = 0;

    {
        AmSipDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmSipDialog,&sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bye();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSipDialog,sipName_bye);

    return NULL;
}


extern "C" {static PyObject *meth_AmSipDialog_cancel(PyObject *, PyObject *);}
static PyObject *meth_AmSipDialog_cancel(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSipDialog_cancel()\n");

    int sipArgsParsed = 0;

    {
        AmSipDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmSipDialog,&sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cancel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSipDialog,sipName_cancel);

    return NULL;
}


extern "C" {static PyObject *meth_AmSipDialog_update(PyObject *, PyObject *);}
static PyObject *meth_AmSipDialog_update(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSipDialog_update()\n");

    int sipArgsParsed = 0;

    {
        const string * a0;
        int a0State = 0;
        AmSipDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_AmSipDialog,&sipCpp,sipType_string,&a0,&a0State))
        {
            int sipRes;

            sipRes = sipCpp->update(*a0);

            sipReleaseType(const_cast<string *>(a0),sipType_string,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSipDialog,sipName_update);

    return NULL;
}


extern "C" {static PyObject *meth_AmSipDialog_reinvite(PyObject *, PyObject *);}
static PyObject *meth_AmSipDialog_reinvite(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmSipDialog_reinvite()\n");

    int sipArgsParsed = 0;

    {
        const string * a0;
        int a0State = 0;
        const string * a1;
        int a1State = 0;
        const string * a2;
        int a2State = 0;
        AmSipDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1J1",&sipSelf,sipType_AmSipDialog,&sipCpp,sipType_string,&a0,&a0State,sipType_string,&a1,&a1State,sipType_string,&a2,&a2State))
        {
            int sipRes;

            sipRes = sipCpp->reinvite(*a0,*a1,*a2);

            sipReleaseType(const_cast<string *>(a0),sipType_string,a0State);
            sipReleaseType(const_cast<string *>(a1),sipType_string,a1State);
            sipReleaseType(const_cast<string *>(a2),sipType_string,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmSipDialog,sipName_reinvite);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_AmSipDialog(void *, const sipTypeDef *);}
static void *cast_AmSipDialog(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_AmSipDialog)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_AmSipDialog(void *, int);}
static void release_AmSipDialog(void *sipCppV,int)
{
    delete reinterpret_cast<AmSipDialog *>(sipCppV);
}


extern "C" {static void assign_AmSipDialog(void *, SIP_SSIZE_T, const void *);}
static void assign_AmSipDialog(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<AmSipDialog *>(sipDst)[sipDstIdx] = *reinterpret_cast<const AmSipDialog *>(sipSrc);
}


extern "C" {static void *array_AmSipDialog(SIP_SSIZE_T);}
static void *array_AmSipDialog(SIP_SSIZE_T sipNrElem)
{
    return new AmSipDialog[sipNrElem];
}


extern "C" {static void *copy_AmSipDialog(const void *, SIP_SSIZE_T);}
static void *copy_AmSipDialog(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new AmSipDialog(reinterpret_cast<const AmSipDialog *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_AmSipDialog(sipSimpleWrapper *);}
static void dealloc_AmSipDialog(sipSimpleWrapper *sipSelf)
{
    sipTrace(SIP_TRACE_DEALLOCS,"dealloc_AmSipDialog()\n");

    if (sipIsPyOwned(sipSelf))
    {
        release_AmSipDialog(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_AmSipDialog(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_AmSipDialog(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    AmSipDialog *sipCpp = 0;

    sipTrace(SIP_TRACE_INITS,"init_AmSipDialog()\n");

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            sipCpp = new AmSipDialog();
        }
    }

    if (!sipCpp)
    {
        const AmSipDialog * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_AmSipDialog,&a0))
        {
            sipCpp = new AmSipDialog(*a0);
        }
    }

    return sipCpp;
}


static PyMethodDef methods_AmSipDialog[] = {
    {SIP_MLNAME_CAST(sipName_bye), meth_AmSipDialog_bye, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cancel), meth_AmSipDialog_cancel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getContactHdr), meth_AmSipDialog_getContactHdr, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getRoute), meth_AmSipDialog_getRoute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getStatus), meth_AmSipDialog_getStatus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getUACTransPending), meth_AmSipDialog_getUACTransPending, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reinvite), meth_AmSipDialog_reinvite, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reply), meth_AmSipDialog_reply, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sendRequest), meth_AmSipDialog_sendRequest, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRoute), meth_AmSipDialog_setRoute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_update), meth_AmSipDialog_update, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateStatus), meth_AmSipDialog_updateStatus, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_AmSipDialog[] = {
    {sipName_Connected, AmSipDialog::Connected, 8},
    {sipName_Disconnected, AmSipDialog::Disconnected, 8},
    {sipName_Disconnecting, AmSipDialog::Disconnecting, 8},
    {sipName_Pending, AmSipDialog::Pending, 8},
};


extern "C" {static PyObject *varget_AmSipDialog_callid(void *, PyObject *);}
static PyObject *varget_AmSipDialog_callid(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = &sipCpp->callid;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipDialog_callid(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_callid(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->callid = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipDialog_contact_uri(void *, PyObject *);}
static PyObject *varget_AmSipDialog_contact_uri(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = &sipCpp->contact_uri;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipDialog_contact_uri(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_contact_uri(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->contact_uri = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipDialog_cseq(void *, PyObject *);}
static PyObject *varget_AmSipDialog_cseq(void *sipSelf, PyObject *)
{
    int sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = sipCpp->cseq;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_AmSipDialog_cseq(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_cseq(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->cseq = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_AmSipDialog_domain(void *, PyObject *);}
static PyObject *varget_AmSipDialog_domain(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = &sipCpp->domain;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipDialog_domain(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_domain(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->domain = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipDialog_local_party(void *, PyObject *);}
static PyObject *varget_AmSipDialog_local_party(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = &sipCpp->local_party;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipDialog_local_party(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_local_party(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->local_party = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipDialog_local_tag(void *, PyObject *);}
static PyObject *varget_AmSipDialog_local_tag(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = &sipCpp->local_tag;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipDialog_local_tag(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_local_tag(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->local_tag = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipDialog_local_uri(void *, PyObject *);}
static PyObject *varget_AmSipDialog_local_uri(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = &sipCpp->local_uri;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipDialog_local_uri(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_local_uri(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->local_uri = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipDialog_next_hop(void *, PyObject *);}
static PyObject *varget_AmSipDialog_next_hop(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = &sipCpp->next_hop;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipDialog_next_hop(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_next_hop(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->next_hop = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipDialog_remote_party(void *, PyObject *);}
static PyObject *varget_AmSipDialog_remote_party(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = &sipCpp->remote_party;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipDialog_remote_party(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_remote_party(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->remote_party = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipDialog_remote_tag(void *, PyObject *);}
static PyObject *varget_AmSipDialog_remote_tag(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = &sipCpp->remote_tag;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipDialog_remote_tag(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_remote_tag(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->remote_tag = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipDialog_remote_uri(void *, PyObject *);}
static PyObject *varget_AmSipDialog_remote_uri(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = &sipCpp->remote_uri;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipDialog_remote_uri(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_remote_uri(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->remote_uri = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipDialog_sip_ip(void *, PyObject *);}
static PyObject *varget_AmSipDialog_sip_ip(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = &sipCpp->sip_ip;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipDialog_sip_ip(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_sip_ip(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->sip_ip = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipDialog_sip_port(void *, PyObject *);}
static PyObject *varget_AmSipDialog_sip_port(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = &sipCpp->sip_port;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipDialog_sip_port(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_sip_port(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->sip_port = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipDialog_user(void *, PyObject *);}
static PyObject *varget_AmSipDialog_user(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    sipVal = &sipCpp->user;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipDialog_user(void *, PyObject *, PyObject *);}
static int varset_AmSipDialog_user(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipDialog *sipCpp = reinterpret_cast<AmSipDialog *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->user = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}

sipVariableDef variables_AmSipDialog[] = {
    {sipName_callid, varget_AmSipDialog_callid, varset_AmSipDialog_callid, 0},
    {sipName_contact_uri, varget_AmSipDialog_contact_uri, varset_AmSipDialog_contact_uri, 0},
    {sipName_cseq, varget_AmSipDialog_cseq, varset_AmSipDialog_cseq, 0},
    {sipName_domain, varget_AmSipDialog_domain, varset_AmSipDialog_domain, 0},
    {sipName_local_party, varget_AmSipDialog_local_party, varset_AmSipDialog_local_party, 0},
    {sipName_local_tag, varget_AmSipDialog_local_tag, varset_AmSipDialog_local_tag, 0},
    {sipName_local_uri, varget_AmSipDialog_local_uri, varset_AmSipDialog_local_uri, 0},
    {sipName_next_hop, varget_AmSipDialog_next_hop, varset_AmSipDialog_next_hop, 0},
    {sipName_remote_party, varget_AmSipDialog_remote_party, varset_AmSipDialog_remote_party, 0},
    {sipName_remote_tag, varget_AmSipDialog_remote_tag, varset_AmSipDialog_remote_tag, 0},
    {sipName_remote_uri, varget_AmSipDialog_remote_uri, varset_AmSipDialog_remote_uri, 0},
    {sipName_sip_ip, varget_AmSipDialog_sip_ip, varset_AmSipDialog_sip_ip, 0},
    {sipName_sip_port, varget_AmSipDialog_sip_port, varset_AmSipDialog_sip_port, 0},
    {sipName_user, varget_AmSipDialog_user, varset_AmSipDialog_user, 0},
};


sipClassTypeDef sipTypeDef_py_sems_lib_AmSipDialog = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_AmSipDialog,
        {0}
    },
    {
        sipNameNr_AmSipDialog,
        {0, 0, 1},
        12, methods_AmSipDialog,
        4, enummembers_AmSipDialog,
        14, variables_AmSipDialog,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    0,
    0,
    init_AmSipDialog,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_AmSipDialog,
    assign_AmSipDialog,
    array_AmSipDialog,
    copy_AmSipDialog,
    release_AmSipDialog,
    cast_AmSipDialog,
    0,
    0,
    0
};
