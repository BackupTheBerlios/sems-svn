/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Mar 22 01:05:19 2010
 */

#include "sipAPIpy_sems_lib.h"

#line 51 "AmAudio.sip"
#include "../../../core/AmAudioFile.h"
#line 12 "sippy_sems_libAmAudioFile.cpp"

#line 4 "string.sip"
#include <string>
using std::string;
#line 17 "sippy_sems_libAmAudioFile.cpp"


extern "C" {static PyObject *meth_AmAudioFile_getLoop(PyObject *, PyObject *);}
static PyObject *meth_AmAudioFile_getLoop(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmAudioFile_getLoop()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmAudioFile,&sipCpp))
        {
            bool sipRes = 0;

#line 65 "AmAudio.sip"
	sipRes = sipCpp->loop.get();
#line 36 "sippy_sems_libAmAudioFile.cpp"

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmAudioFile,sipName_getLoop);

    return NULL;
}


extern "C" {static PyObject *meth_AmAudioFile_setLoop(PyObject *, PyObject *);}
static PyObject *meth_AmAudioFile_setLoop(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmAudioFile_setLoop()\n");

    int sipArgsParsed = 0;

    {
        bool a0;
        AmAudioFile *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_AmAudioFile,&sipCpp,&a0))
        {
#line 70 "AmAudio.sip"
	sipCpp->loop.set(a0);
#line 64 "sippy_sems_libAmAudioFile.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmAudioFile,sipName_setLoop);

    return NULL;
}


extern "C" {static PyObject *meth_AmAudioFile_open(PyObject *, PyObject *);}
static PyObject *meth_AmAudioFile_open(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmAudioFile_open()\n");

    int sipArgsParsed = 0;

    {
        const string * a0;
        int a0State = 0;
        AmAudioFile::OpenMode a1 = AmAudioFile::Read;
        bool a2 = 0;
        AmAudioFile *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|Eb",&sipSelf,sipType_AmAudioFile,&sipCpp,sipType_string,&a0,&a0State,sipType_AmAudioFile_OpenMode,&a1,&a2))
        {
            int sipRes;

            sipRes = sipCpp->open(*a0,a1,a2);

            sipReleaseType(const_cast<string *>(a0),sipType_string,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmAudioFile,sipName_open);

    return NULL;
}


extern "C" {static PyObject *meth_AmAudioFile_rewind(PyObject *, PyObject *);}
static PyObject *meth_AmAudioFile_rewind(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmAudioFile_rewind()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmAudioFile,&sipCpp))
        {
            sipCpp->rewind();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmAudioFile,sipName_rewind);

    return NULL;
}


extern "C" {static PyObject *meth_AmAudioFile_close(PyObject *, PyObject *);}
static PyObject *meth_AmAudioFile_close(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmAudioFile_close()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmAudioFile,&sipCpp))
        {
            sipCpp->close();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmAudioFile,sipName_close);

    return NULL;
}


extern "C" {static PyObject *meth_AmAudioFile_getDataSize(PyObject *, PyObject *);}
static PyObject *meth_AmAudioFile_getDataSize(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmAudioFile_getDataSize()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_AmAudioFile,&sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getDataSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AmAudioFile,sipName_getDataSize);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_AmAudioFile(void *, const sipTypeDef *);}
static void *cast_AmAudioFile(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_AmAudioFile)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_AmAudioFile(void *, int);}
static void release_AmAudioFile(void *sipCppV,int)
{
    delete reinterpret_cast<AmAudioFile *>(sipCppV);
}


extern "C" {static void dealloc_AmAudioFile(sipSimpleWrapper *);}
static void dealloc_AmAudioFile(sipSimpleWrapper *sipSelf)
{
    sipTrace(SIP_TRACE_DEALLOCS,"dealloc_AmAudioFile()\n");

    if (sipIsPyOwned(sipSelf))
    {
        release_AmAudioFile(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_AmAudioFile(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_AmAudioFile(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    AmAudioFile *sipCpp = 0;

    sipTrace(SIP_TRACE_INITS,"init_AmAudioFile()\n");

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            sipCpp = new AmAudioFile();
        }
    }

    return sipCpp;
}


static PyMethodDef methods_AmAudioFile[] = {
    {SIP_MLNAME_CAST(sipName_close), meth_AmAudioFile_close, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDataSize), meth_AmAudioFile_getDataSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getLoop), meth_AmAudioFile_getLoop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_open), meth_AmAudioFile_open, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rewind), meth_AmAudioFile_rewind, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLoop), meth_AmAudioFile_setLoop, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_AmAudioFile[] = {
    {sipName_Read, AmAudioFile::Read, 3},
    {sipName_Write, AmAudioFile::Write, 3},
};


sipClassTypeDef sipTypeDef_py_sems_lib_AmAudioFile = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_AmAudioFile,
        {0}
    },
    {
        sipNameNr_AmAudioFile,
        {0, 0, 1},
        6, methods_AmAudioFile,
        2, enummembers_AmAudioFile,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    0,
    0,
    init_AmAudioFile,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_AmAudioFile,
    0,
    0,
    0,
    release_AmAudioFile,
    cast_AmAudioFile,
    0,
    0,
    0
};
