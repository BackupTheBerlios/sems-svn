/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.5.2 (4.5.2) on Mon Dec  8 15:20:56 2008
 */

#include "sipAPIpy_sems_lib.h"
#include "sippy_sems_libAmAudioFile.h"

#include "sippy_sems_libAmAudioFile.h"
#include "sippy_sems_libstring.h"



extern "C" {static PyObject *meth_AmAudioFile_getLoop(PyObject *, PyObject *);}
static PyObject *meth_AmAudioFile_getLoop(PyObject *sipSelf,PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmAudioFile_getLoop()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipClass_AmAudioFile,&sipCpp))
        {
            bool sipRes = 0;

#line 65 "AmAudio.sip"
	sipRes = sipCpp->loop.get();
#line 32 "sippy_sems_libAmAudioFile.cpp"

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_py_sems_lib_AmAudioFile,sipNm_py_sems_lib_getLoop);

    return NULL;
}


extern "C" {static PyObject *meth_AmAudioFile_setLoop(PyObject *, PyObject *);}
static PyObject *meth_AmAudioFile_setLoop(PyObject *sipSelf,PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmAudioFile_setLoop()\n");

    int sipArgsParsed = 0;

    {
        bool a0;
        AmAudioFile *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipClass_AmAudioFile,&sipCpp,&a0))
        {
#line 70 "AmAudio.sip"
	sipCpp->loop.set(a0);
#line 60 "sippy_sems_libAmAudioFile.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_py_sems_lib_AmAudioFile,sipNm_py_sems_lib_setLoop);

    return NULL;
}


extern "C" {static PyObject *meth_AmAudioFile_open(PyObject *, PyObject *);}
static PyObject *meth_AmAudioFile_open(PyObject *sipSelf,PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmAudioFile_open()\n");

    int sipArgsParsed = 0;

    {
        const string * a0;
        int a0State = 0;
        AmAudioFile::OpenMode a1 = AmAudioFile::Read;
        bool a2 = 0;
        AmAudioFile *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BM1|Eb",&sipSelf,sipClass_AmAudioFile,&sipCpp,sipMappedType_string,&a0,&a0State,sipEnum_AmAudioFile_OpenMode,&a1,&a2))
        {
            int sipRes;

            sipRes = sipCpp->open(*a0,a1,a2);

            sipReleaseMappedType(const_cast<string *>(a0),sipMappedType_string,a0State);

            return PyInt_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_py_sems_lib_AmAudioFile,sipNm_py_sems_lib_open);

    return NULL;
}


extern "C" {static PyObject *meth_AmAudioFile_rewind(PyObject *, PyObject *);}
static PyObject *meth_AmAudioFile_rewind(PyObject *sipSelf,PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmAudioFile_rewind()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipClass_AmAudioFile,&sipCpp))
        {
            sipCpp->rewind();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_py_sems_lib_AmAudioFile,sipNm_py_sems_lib_rewind);

    return NULL;
}


extern "C" {static PyObject *meth_AmAudioFile_close(PyObject *, PyObject *);}
static PyObject *meth_AmAudioFile_close(PyObject *sipSelf,PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmAudioFile_close()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipClass_AmAudioFile,&sipCpp))
        {
            sipCpp->close();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_py_sems_lib_AmAudioFile,sipNm_py_sems_lib_close);

    return NULL;
}


extern "C" {static PyObject *meth_AmAudioFile_getDataSize(PyObject *, PyObject *);}
static PyObject *meth_AmAudioFile_getDataSize(PyObject *sipSelf,PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_AmAudioFile_getDataSize()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipClass_AmAudioFile,&sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getDataSize();

            return PyInt_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_py_sems_lib_AmAudioFile,sipNm_py_sems_lib_getDataSize);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_AmAudioFile(void *, sipWrapperType *);}
static void *cast_AmAudioFile(void *ptr,sipWrapperType *targetClass)
{
    if (targetClass == sipClass_AmAudioFile)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_AmAudioFile(void *, int);}
static void release_AmAudioFile(void *ptr,int)
{
    delete reinterpret_cast<AmAudioFile *>(ptr);
}


extern "C" {static void dealloc_AmAudioFile(sipWrapper *);}
static void dealloc_AmAudioFile(sipWrapper *sipSelf)
{
    sipTrace(SIP_TRACE_DEALLOCS,"dealloc_AmAudioFile()\n");

    if (sipIsPyOwned(sipSelf))
    {
        release_AmAudioFile(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_AmAudioFile(sipWrapper *, PyObject *, sipWrapper **, int *);}
static void *init_AmAudioFile(sipWrapper *,PyObject *sipArgs,sipWrapper **,int *sipArgsParsed)
{
    AmAudioFile *sipCpp = 0;

    sipTrace(SIP_TRACE_INITS,"init_AmAudioFile()\n");

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            sipCpp = new AmAudioFile();
        }
    }

    return sipCpp;
}


extern "C" {static void *forceConvertTo_AmAudioFile(PyObject *, int *);}
static void *forceConvertTo_AmAudioFile(PyObject *valobj,int *iserrp)
{
    if (*iserrp || valobj == NULL)
        return NULL;

    if (valobj == Py_None || sipIsSubClassInstance(valobj,sipClass_AmAudioFile))
        return sipConvertToCpp(valobj,sipClass_AmAudioFile,iserrp);

    sipBadClass(sipNm_py_sems_lib_AmAudioFile);

    *iserrp = 1;

    return NULL;
}


static PyMethodDef methods_AmAudioFile[] = {
    {sipNm_py_sems_lib_close, meth_AmAudioFile_close, METH_VARARGS, NULL},
    {sipNm_py_sems_lib_getDataSize, meth_AmAudioFile_getDataSize, METH_VARARGS, NULL},
    {sipNm_py_sems_lib_getLoop, meth_AmAudioFile_getLoop, METH_VARARGS, NULL},
    {sipNm_py_sems_lib_open, meth_AmAudioFile_open, METH_VARARGS, NULL},
    {sipNm_py_sems_lib_rewind, meth_AmAudioFile_rewind, METH_VARARGS, NULL},
    {sipNm_py_sems_lib_setLoop, meth_AmAudioFile_setLoop, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_AmAudioFile[] = {
    {sipNm_py_sems_lib_Read, AmAudioFile::Read, 0},
    {sipNm_py_sems_lib_Write, AmAudioFile::Write, 0},
};


sipTypeDef sipType_py_sems_lib_AmAudioFile = {
    0,
    0,
    "py_sems_lib.AmAudioFile",
    0,
    {0, 0, 1},
    0,
    0,
    6, methods_AmAudioFile,
    2, enummembers_AmAudioFile,
    0,
    init_AmAudioFile,
    0,
    0,
    0,
    0,
    0,
    0,
    dealloc_AmAudioFile,
    cast_AmAudioFile,
    release_AmAudioFile,
    forceConvertTo_AmAudioFile,
    0,
    0,
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    0
};
