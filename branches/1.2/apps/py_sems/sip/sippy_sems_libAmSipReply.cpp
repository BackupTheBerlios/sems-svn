/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Mar 22 01:05:19 2010
 */

#include "sipAPIpy_sems_lib.h"

#line 6 "AmSipReply.sip"
#include "../../../core/AmSipMsg.h"
#line 12 "sippy_sems_libAmSipReply.cpp"

#line 4 "string.sip"
#include <string>
using std::string;
#line 17 "sippy_sems_libAmSipReply.cpp"


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_AmSipReply(void *, const sipTypeDef *);}
static void *cast_AmSipReply(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_AmSipReply)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_AmSipReply(void *, int);}
static void release_AmSipReply(void *sipCppV,int)
{
    delete reinterpret_cast<AmSipReply *>(sipCppV);
}


extern "C" {static void assign_AmSipReply(void *, SIP_SSIZE_T, const void *);}
static void assign_AmSipReply(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<AmSipReply *>(sipDst)[sipDstIdx] = *reinterpret_cast<const AmSipReply *>(sipSrc);
}


extern "C" {static void *array_AmSipReply(SIP_SSIZE_T);}
static void *array_AmSipReply(SIP_SSIZE_T sipNrElem)
{
    return new AmSipReply[sipNrElem];
}


extern "C" {static void *copy_AmSipReply(const void *, SIP_SSIZE_T);}
static void *copy_AmSipReply(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new AmSipReply(reinterpret_cast<const AmSipReply *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_AmSipReply(sipSimpleWrapper *);}
static void dealloc_AmSipReply(sipSimpleWrapper *sipSelf)
{
    sipTrace(SIP_TRACE_DEALLOCS,"dealloc_AmSipReply()\n");

    if (sipIsPyOwned(sipSelf))
    {
        release_AmSipReply(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_AmSipReply(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_AmSipReply(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    AmSipReply *sipCpp = 0;

    sipTrace(SIP_TRACE_INITS,"init_AmSipReply()\n");

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            sipCpp = new AmSipReply();
        }
    }

    if (!sipCpp)
    {
        const AmSipReply * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_AmSipReply,&a0))
        {
            sipCpp = new AmSipReply(*a0);
        }
    }

    return sipCpp;
}


extern "C" {static PyObject *varget_AmSipReply_body(void *, PyObject *);}
static PyObject *varget_AmSipReply_body(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    sipVal = &sipCpp->body;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipReply_body(void *, PyObject *, PyObject *);}
static int varset_AmSipReply_body(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->body = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipReply_code(void *, PyObject *);}
static PyObject *varget_AmSipReply_code(void *sipSelf, PyObject *)
{
    unsigned sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    sipVal = sipCpp->code;

    return PyLong_FromUnsignedLong(sipVal);
}


extern "C" {static int varset_AmSipReply_code(void *, PyObject *, PyObject *);}
static int varset_AmSipReply_code(void *sipSelf, PyObject *sipPy, PyObject *)
{
    unsigned sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    sipVal = (unsigned)sipLong_AsUnsignedLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->code = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_AmSipReply_cseq(void *, PyObject *);}
static PyObject *varget_AmSipReply_cseq(void *sipSelf, PyObject *)
{
    unsigned sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    sipVal = sipCpp->cseq;

    return PyLong_FromUnsignedLong(sipVal);
}


extern "C" {static int varset_AmSipReply_cseq(void *, PyObject *, PyObject *);}
static int varset_AmSipReply_cseq(void *sipSelf, PyObject *sipPy, PyObject *)
{
    unsigned sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    sipVal = (unsigned)sipLong_AsUnsignedLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->cseq = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_AmSipReply_hdrs(void *, PyObject *);}
static PyObject *varget_AmSipReply_hdrs(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    sipVal = &sipCpp->hdrs;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipReply_hdrs(void *, PyObject *, PyObject *);}
static int varset_AmSipReply_hdrs(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->hdrs = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipReply_local_tag(void *, PyObject *);}
static PyObject *varget_AmSipReply_local_tag(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    sipVal = &sipCpp->local_tag;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipReply_local_tag(void *, PyObject *, PyObject *);}
static int varset_AmSipReply_local_tag(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->local_tag = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipReply_next_hop(void *, PyObject *);}
static PyObject *varget_AmSipReply_next_hop(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    sipVal = &sipCpp->next_hop;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipReply_next_hop(void *, PyObject *, PyObject *);}
static int varset_AmSipReply_next_hop(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->next_hop = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipReply_next_request_uri(void *, PyObject *);}
static PyObject *varget_AmSipReply_next_request_uri(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    sipVal = &sipCpp->next_request_uri;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipReply_next_request_uri(void *, PyObject *, PyObject *);}
static int varset_AmSipReply_next_request_uri(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->next_request_uri = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipReply_reason(void *, PyObject *);}
static PyObject *varget_AmSipReply_reason(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    sipVal = &sipCpp->reason;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipReply_reason(void *, PyObject *, PyObject *);}
static int varset_AmSipReply_reason(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->reason = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipReply_remote_tag(void *, PyObject *);}
static PyObject *varget_AmSipReply_remote_tag(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    sipVal = &sipCpp->remote_tag;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipReply_remote_tag(void *, PyObject *, PyObject *);}
static int varset_AmSipReply_remote_tag(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->remote_tag = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipReply_route(void *, PyObject *);}
static PyObject *varget_AmSipReply_route(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    sipVal = &sipCpp->route;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipReply_route(void *, PyObject *, PyObject *);}
static int varset_AmSipReply_route(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipReply *sipCpp = reinterpret_cast<AmSipReply *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->route = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}

sipVariableDef variables_AmSipReply[] = {
    {sipName_body, varget_AmSipReply_body, varset_AmSipReply_body, 0},
    {sipName_code, varget_AmSipReply_code, varset_AmSipReply_code, 0},
    {sipName_cseq, varget_AmSipReply_cseq, varset_AmSipReply_cseq, 0},
    {sipName_hdrs, varget_AmSipReply_hdrs, varset_AmSipReply_hdrs, 0},
    {sipName_local_tag, varget_AmSipReply_local_tag, varset_AmSipReply_local_tag, 0},
    {sipName_next_hop, varget_AmSipReply_next_hop, varset_AmSipReply_next_hop, 0},
    {sipName_next_request_uri, varget_AmSipReply_next_request_uri, varset_AmSipReply_next_request_uri, 0},
    {sipName_reason, varget_AmSipReply_reason, varset_AmSipReply_reason, 0},
    {sipName_remote_tag, varget_AmSipReply_remote_tag, varset_AmSipReply_remote_tag, 0},
    {sipName_route, varget_AmSipReply_route, varset_AmSipReply_route, 0},
};


sipClassTypeDef sipTypeDef_py_sems_lib_AmSipReply = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_AmSipReply,
        {0}
    },
    {
        sipNameNr_AmSipReply,
        {0, 0, 1},
        0, 0,
        0, 0,
        10, variables_AmSipReply,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    0,
    0,
    init_AmSipReply,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_AmSipReply,
    assign_AmSipReply,
    array_AmSipReply,
    copy_AmSipReply,
    release_AmSipReply,
    cast_AmSipReply,
    0,
    0,
    0
};
