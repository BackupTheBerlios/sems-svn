/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Mar 22 01:05:19 2010
 */

#include "sipAPIpy_sems_lib.h"

#line 6 "PySemsB2BDialog.sip"
#include "../PySemsB2BDialog.h"
#line 12 "sippy_sems_libPySemsB2BDialog.cpp"

#line 6 "AmSipDialog.sip"
#include "../../../core/AmSipDialog.h"
#line 16 "sippy_sems_libPySemsB2BDialog.cpp"
#line 5 "AmAudio.sip"
#include "../../../core/AmEvent.h"
#line 19 "sippy_sems_libPySemsB2BDialog.cpp"
#line 51 "AmAudio.sip"
#include "../../../core/AmAudioFile.h"
#line 22 "sippy_sems_libPySemsB2BDialog.cpp"
#line 6 "AmSipRequest.sip"
#include "../../../core/AmSipMsg.h"
#line 25 "sippy_sems_libPySemsB2BDialog.cpp"
#line 4 "string.sip"
#include <string>
using std::string;
#line 29 "sippy_sems_libPySemsB2BDialog.cpp"


class sipPySemsB2BDialog : public PySemsB2BDialog
{
public:
    sipPySemsB2BDialog();
    virtual ~sipPySemsB2BDialog();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void onInvite(const AmSipRequest&);
    void onSessionStart(const AmSipRequest&);
    void onCancel();
    void onBye(const AmSipRequest&);
    void onDtmf(int,int);
    void process(AmEvent *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPySemsB2BDialog(const sipPySemsB2BDialog &);
    sipPySemsB2BDialog &operator = (const sipPySemsB2BDialog &);

    char sipPyMethods[6];
};

sipPySemsB2BDialog::sipPySemsB2BDialog(): PySemsB2BDialog(), sipPySelf(0)
{
    sipTrace(SIP_TRACE_CTORS,"sipPySemsB2BDialog::sipPySemsB2BDialog() (this=0x%08x)\n",this);

    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPySemsB2BDialog::~sipPySemsB2BDialog()
{
    sipTrace(SIP_TRACE_DTORS,"sipPySemsB2BDialog::~sipPySemsB2BDialog() (this=0x%08x)\n",this);

    sipCommonDtor(sipPySelf);
}

void sipPySemsB2BDialog::onInvite(const AmSipRequest& a0)
{
    sipTrace(SIP_TRACE_CATCHERS,"void sipPySemsB2BDialog::onInvite(const AmSipRequest&) (this=0x%08x)\n",this);

    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_onInvite);

    if (!meth)
    {
        PySemsB2BDialog::onInvite(a0);
        return;
    }

    extern void sipVH_py_sems_lib_4(sip_gilstate_t,PyObject *,const AmSipRequest&);

    sipVH_py_sems_lib_4(sipGILState,meth,a0);
}

void sipPySemsB2BDialog::onSessionStart(const AmSipRequest& a0)
{
    sipTrace(SIP_TRACE_CATCHERS,"void sipPySemsB2BDialog::onSessionStart(const AmSipRequest&) (this=0x%08x)\n",this);

    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_onSessionStart);

    if (!meth)
    {
        PySemsB2BDialog::onSessionStart(a0);
        return;
    }

    extern void sipVH_py_sems_lib_4(sip_gilstate_t,PyObject *,const AmSipRequest&);

    sipVH_py_sems_lib_4(sipGILState,meth,a0);
}

void sipPySemsB2BDialog::onCancel()
{
    sipTrace(SIP_TRACE_CATCHERS,"void sipPySemsB2BDialog::onCancel() (this=0x%08x)\n",this);

    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_onCancel);

    if (!meth)
    {
        PySemsB2BDialog::onCancel();
        return;
    }

    extern void sipVH_py_sems_lib_5(sip_gilstate_t,PyObject *);

    sipVH_py_sems_lib_5(sipGILState,meth);
}

void sipPySemsB2BDialog::onBye(const AmSipRequest& a0)
{
    sipTrace(SIP_TRACE_CATCHERS,"void sipPySemsB2BDialog::onBye(const AmSipRequest&) (this=0x%08x)\n",this);

    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_onBye);

    if (!meth)
    {
        PySemsB2BDialog::onBye(a0);
        return;
    }

    extern void sipVH_py_sems_lib_4(sip_gilstate_t,PyObject *,const AmSipRequest&);

    sipVH_py_sems_lib_4(sipGILState,meth,a0);
}

void sipPySemsB2BDialog::onDtmf(int a0,int a1)
{
    sipTrace(SIP_TRACE_CATCHERS,"void sipPySemsB2BDialog::onDtmf(int,int) (this=0x%08x)\n",this);

    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_onDtmf);

    if (!meth)
    {
        PySemsB2BDialog::onDtmf(a0,a1);
        return;
    }

    extern void sipVH_py_sems_lib_3(sip_gilstate_t,PyObject *,int,int);

    sipVH_py_sems_lib_3(sipGILState,meth,a0,a1);
}

void sipPySemsB2BDialog::process(AmEvent *a0)
{
    sipTrace(SIP_TRACE_CATCHERS,"void sipPySemsB2BDialog::process(AmEvent *) (this=0x%08x)\n",this);

    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_process);

    if (!meth)
    {
        PySemsB2BDialog::process(a0);
        return;
    }

    extern void sipVH_py_sems_lib_2(sip_gilstate_t,PyObject *,AmEvent *);

    sipVH_py_sems_lib_2(sipGILState,meth,a0);
}


extern "C" {static PyObject *meth_PySemsB2BDialog_acceptAudio(PyObject *, PyObject *);}
static PyObject *meth_PySemsB2BDialog_acceptAudio(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_PySemsB2BDialog_acceptAudio()\n");

    int sipArgsParsed = 0;

    {
        const string * a0;
        int a0State = 0;
        const string * a1;
        int a1State = 0;
        string * a2;
        PySemsB2BDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_PySemsB2BDialog,&sipCpp,sipType_string,&a0,&a0State,sipType_string,&a1,&a1State))
        {
            int sipRes;
            PyObject *sipResult;
            a2 = new string();

            sipRes = sipCpp->acceptAudio(*a0,*a1,a2);

            sipResult = sipBuildResult(0,"(iD)",sipRes,a2,sipType_string,NULL);

            sipReleaseType(const_cast<string *>(a0),sipType_string,a0State);
            sipReleaseType(const_cast<string *>(a1),sipType_string,a1State);
            delete a2;

            return sipResult;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_PySemsB2BDialog,sipName_acceptAudio);

    return NULL;
}


extern "C" {static PyObject *meth_PySemsB2BDialog_setStopped(PyObject *, PyObject *);}
static PyObject *meth_PySemsB2BDialog_setStopped(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_PySemsB2BDialog_setStopped()\n");

    int sipArgsParsed = 0;

    {
        PySemsB2BDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_PySemsB2BDialog,&sipCpp))
        {
            sipCpp->setStopped();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_PySemsB2BDialog,sipName_setStopped);

    return NULL;
}


extern "C" {static PyObject *meth_PySemsB2BDialog_onInvite(PyObject *, PyObject *);}
static PyObject *meth_PySemsB2BDialog_onInvite(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_PySemsB2BDialog_onInvite()\n");

    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const AmSipRequest * a0;
        PySemsB2BDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_PySemsB2BDialog,&sipCpp,sipType_AmSipRequest,&a0))
        {
            (sipSelfWasArg ? sipCpp->PySemsB2BDialog::onInvite(*a0) : sipCpp->onInvite(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_PySemsB2BDialog,sipName_onInvite);

    return NULL;
}


extern "C" {static PyObject *meth_PySemsB2BDialog_onSessionStart(PyObject *, PyObject *);}
static PyObject *meth_PySemsB2BDialog_onSessionStart(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_PySemsB2BDialog_onSessionStart()\n");

    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const AmSipRequest * a0;
        PySemsB2BDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_PySemsB2BDialog,&sipCpp,sipType_AmSipRequest,&a0))
        {
            (sipSelfWasArg ? sipCpp->PySemsB2BDialog::onSessionStart(*a0) : sipCpp->onSessionStart(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_PySemsB2BDialog,sipName_onSessionStart);

    return NULL;
}


extern "C" {static PyObject *meth_PySemsB2BDialog_onCancel(PyObject *, PyObject *);}
static PyObject *meth_PySemsB2BDialog_onCancel(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_PySemsB2BDialog_onCancel()\n");

    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        PySemsB2BDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_PySemsB2BDialog,&sipCpp))
        {
            (sipSelfWasArg ? sipCpp->PySemsB2BDialog::onCancel() : sipCpp->onCancel());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_PySemsB2BDialog,sipName_onCancel);

    return NULL;
}


extern "C" {static PyObject *meth_PySemsB2BDialog_onBye(PyObject *, PyObject *);}
static PyObject *meth_PySemsB2BDialog_onBye(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_PySemsB2BDialog_onBye()\n");

    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const AmSipRequest * a0;
        PySemsB2BDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_PySemsB2BDialog,&sipCpp,sipType_AmSipRequest,&a0))
        {
            (sipSelfWasArg ? sipCpp->PySemsB2BDialog::onBye(*a0) : sipCpp->onBye(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_PySemsB2BDialog,sipName_onBye);

    return NULL;
}


extern "C" {static PyObject *meth_PySemsB2BDialog_onDtmf(PyObject *, PyObject *);}
static PyObject *meth_PySemsB2BDialog_onDtmf(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_PySemsB2BDialog_onDtmf()\n");

    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        PySemsB2BDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_PySemsB2BDialog,&sipCpp,&a0,&a1))
        {
            (sipSelfWasArg ? sipCpp->PySemsB2BDialog::onDtmf(a0,a1) : sipCpp->onDtmf(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_PySemsB2BDialog,sipName_onDtmf);

    return NULL;
}


extern "C" {static PyObject *meth_PySemsB2BDialog_setInput(PyObject *, PyObject *);}
static PyObject *meth_PySemsB2BDialog_setInput(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_PySemsB2BDialog_setInput()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile * a0;
        PySemsB2BDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_PySemsB2BDialog,&sipCpp,sipType_AmAudioFile,&a0))
        {
            sipCpp->setInput(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_PySemsB2BDialog,sipName_setInput);

    return NULL;
}


extern "C" {static PyObject *meth_PySemsB2BDialog_setOutput(PyObject *, PyObject *);}
static PyObject *meth_PySemsB2BDialog_setOutput(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_PySemsB2BDialog_setOutput()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile * a0;
        PySemsB2BDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_PySemsB2BDialog,&sipCpp,sipType_AmAudioFile,&a0))
        {
            sipCpp->setOutput(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_PySemsB2BDialog,sipName_setOutput);

    return NULL;
}


extern "C" {static PyObject *meth_PySemsB2BDialog_setInOut(PyObject *, PyObject *);}
static PyObject *meth_PySemsB2BDialog_setInOut(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_PySemsB2BDialog_setInOut()\n");

    int sipArgsParsed = 0;

    {
        AmAudioFile * a0;
        AmAudioFile * a1;
        PySemsB2BDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J8",&sipSelf,sipType_PySemsB2BDialog,&sipCpp,sipType_AmAudioFile,&a0,sipType_AmAudioFile,&a1))
        {
            sipCpp->setInOut(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_PySemsB2BDialog,sipName_setInOut);

    return NULL;
}


extern "C" {static PyObject *meth_PySemsB2BDialog_process(PyObject *, PyObject *);}
static PyObject *meth_PySemsB2BDialog_process(PyObject *sipSelf, PyObject *sipArgs)
{
    sipTrace(SIP_TRACE_METHODS,"meth_PySemsB2BDialog_process()\n");

    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        AmEvent * a0;
        PySemsB2BDialog *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_PySemsB2BDialog,&sipCpp,sipType_AmEvent,&a0))
        {
            (sipSelfWasArg ? sipCpp->PySemsB2BDialog::process(a0) : sipCpp->process(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_PySemsB2BDialog,sipName_process);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_PySemsB2BDialog(void *, const sipTypeDef *);}
static void *cast_PySemsB2BDialog(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_PySemsB2BDialog)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_PySemsB2BDialog(void *, int);}
static void release_PySemsB2BDialog(void *sipCppV,int state)
{
#line 17 "PySemsB2BDialog.sip"
    fprintf(stderr,"------------- dealloc_PySemsB2BDialog ----------\n");
#line 528 "sippy_sems_libPySemsB2BDialog.cpp"

    if (state & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipPySemsB2BDialog *>(sipCppV);
    else
        delete reinterpret_cast<PySemsB2BDialog *>(sipCppV);
}


extern "C" {static void dealloc_PySemsB2BDialog(sipSimpleWrapper *);}
static void dealloc_PySemsB2BDialog(sipSimpleWrapper *sipSelf)
{
    sipTrace(SIP_TRACE_DEALLOCS,"dealloc_PySemsB2BDialog()\n");

    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipPySemsB2BDialog *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_PySemsB2BDialog(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_PySemsB2BDialog(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_PySemsB2BDialog(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipPySemsB2BDialog *sipCpp = 0;

    sipTrace(SIP_TRACE_INITS,"init_PySemsB2BDialog()\n");

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            sipCpp = new sipPySemsB2BDialog();
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


static PyMethodDef methods_PySemsB2BDialog[] = {
    {SIP_MLNAME_CAST(sipName_acceptAudio), meth_PySemsB2BDialog_acceptAudio, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_onBye), meth_PySemsB2BDialog_onBye, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_onCancel), meth_PySemsB2BDialog_onCancel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_onDtmf), meth_PySemsB2BDialog_onDtmf, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_onInvite), meth_PySemsB2BDialog_onInvite, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_onSessionStart), meth_PySemsB2BDialog_onSessionStart, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_process), meth_PySemsB2BDialog_process, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setInOut), meth_PySemsB2BDialog_setInOut, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setInput), meth_PySemsB2BDialog_setInput, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOutput), meth_PySemsB2BDialog_setOutput, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStopped), meth_PySemsB2BDialog_setStopped, METH_VARARGS, NULL}
};


extern "C" {static PyObject *varget_PySemsB2BDialog_dlg(void *, PyObject *);}
static PyObject *varget_PySemsB2BDialog_dlg(void *sipSelf, PyObject *)
{
    AmSipDialog *sipVal;
    PySemsB2BDialog *sipCpp = reinterpret_cast<PySemsB2BDialog *>(sipSelf);

    sipVal = &sipCpp->dlg;

    return sipConvertFromType(sipVal,sipType_AmSipDialog, NULL);
}


extern "C" {static int varset_PySemsB2BDialog_dlg(void *, PyObject *, PyObject *);}
static int varset_PySemsB2BDialog_dlg(void *sipSelf, PyObject *sipPy, PyObject *)
{
    AmSipDialog *sipVal;
    PySemsB2BDialog *sipCpp = reinterpret_cast<PySemsB2BDialog *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<AmSipDialog *>(sipForceConvertToType(sipPy,sipType_AmSipDialog,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->dlg = *sipVal;

    return 0;
}

sipVariableDef variables_PySemsB2BDialog[] = {
    {sipName_dlg, varget_PySemsB2BDialog_dlg, varset_PySemsB2BDialog_dlg, 0},
};


sipClassTypeDef sipTypeDef_py_sems_lib_PySemsB2BDialog = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_PySemsB2BDialog,
        {0}
    },
    {
        sipNameNr_PySemsB2BDialog,
        {0, 0, 1},
        11, methods_PySemsB2BDialog,
        0, 0,
        1, variables_PySemsB2BDialog,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    0,
    0,
    init_PySemsB2BDialog,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_PySemsB2BDialog,
    0,
    0,
    0,
    release_PySemsB2BDialog,
    cast_PySemsB2BDialog,
    0,
    0,
    0
};
