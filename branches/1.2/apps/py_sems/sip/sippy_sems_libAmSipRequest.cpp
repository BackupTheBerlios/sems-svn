/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Mar 22 01:05:19 2010
 */

#include "sipAPIpy_sems_lib.h"

#line 6 "AmSipRequest.sip"
#include "../../../core/AmSipMsg.h"
#line 12 "sippy_sems_libAmSipRequest.cpp"

#line 4 "string.sip"
#include <string>
using std::string;
#line 17 "sippy_sems_libAmSipRequest.cpp"


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_AmSipRequest(void *, const sipTypeDef *);}
static void *cast_AmSipRequest(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_AmSipRequest)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_AmSipRequest(void *, int);}
static void release_AmSipRequest(void *sipCppV,int)
{
    delete reinterpret_cast<AmSipRequest *>(sipCppV);
}


extern "C" {static void assign_AmSipRequest(void *, SIP_SSIZE_T, const void *);}
static void assign_AmSipRequest(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<AmSipRequest *>(sipDst)[sipDstIdx] = *reinterpret_cast<const AmSipRequest *>(sipSrc);
}


extern "C" {static void *array_AmSipRequest(SIP_SSIZE_T);}
static void *array_AmSipRequest(SIP_SSIZE_T sipNrElem)
{
    return new AmSipRequest[sipNrElem];
}


extern "C" {static void *copy_AmSipRequest(const void *, SIP_SSIZE_T);}
static void *copy_AmSipRequest(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new AmSipRequest(reinterpret_cast<const AmSipRequest *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_AmSipRequest(sipSimpleWrapper *);}
static void dealloc_AmSipRequest(sipSimpleWrapper *sipSelf)
{
    sipTrace(SIP_TRACE_DEALLOCS,"dealloc_AmSipRequest()\n");

    if (sipIsPyOwned(sipSelf))
    {
        release_AmSipRequest(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_AmSipRequest(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_AmSipRequest(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    AmSipRequest *sipCpp = 0;

    sipTrace(SIP_TRACE_INITS,"init_AmSipRequest()\n");

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            sipCpp = new AmSipRequest();
        }
    }

    if (!sipCpp)
    {
        const AmSipRequest * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_AmSipRequest,&a0))
        {
            sipCpp = new AmSipRequest(*a0);
        }
    }

    return sipCpp;
}


extern "C" {static PyObject *varget_AmSipRequest_body(void *, PyObject *);}
static PyObject *varget_AmSipRequest_body(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->body;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_body(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_body(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->body = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_callid(void *, PyObject *);}
static PyObject *varget_AmSipRequest_callid(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->callid;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_callid(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_callid(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->callid = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_cmd(void *, PyObject *);}
static PyObject *varget_AmSipRequest_cmd(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->cmd;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_cmd(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_cmd(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->cmd = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_cseq(void *, PyObject *);}
static PyObject *varget_AmSipRequest_cseq(void *sipSelf, PyObject *)
{
    unsigned sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = sipCpp->cseq;

    return PyLong_FromUnsignedLong(sipVal);
}


extern "C" {static int varset_AmSipRequest_cseq(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_cseq(void *sipSelf, PyObject *sipPy, PyObject *)
{
    unsigned sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = (unsigned)sipLong_AsUnsignedLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->cseq = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_domain(void *, PyObject *);}
static PyObject *varget_AmSipRequest_domain(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->domain;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_domain(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_domain(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->domain = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_dstip(void *, PyObject *);}
static PyObject *varget_AmSipRequest_dstip(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->dstip;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_dstip(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_dstip(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->dstip = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_from(void *, PyObject *);}
static PyObject *varget_AmSipRequest_from(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->from;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_from(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_from(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->from = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_from_tag(void *, PyObject *);}
static PyObject *varget_AmSipRequest_from_tag(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->from_tag;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_from_tag(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_from_tag(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->from_tag = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_from_uri(void *, PyObject *);}
static PyObject *varget_AmSipRequest_from_uri(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->from_uri;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_from_uri(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_from_uri(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->from_uri = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_hdrs(void *, PyObject *);}
static PyObject *varget_AmSipRequest_hdrs(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->hdrs;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_hdrs(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_hdrs(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->hdrs = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_method(void *, PyObject *);}
static PyObject *varget_AmSipRequest_method(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->method;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_method(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_method(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->method = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_next_hop(void *, PyObject *);}
static PyObject *varget_AmSipRequest_next_hop(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->next_hop;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_next_hop(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_next_hop(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->next_hop = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_port(void *, PyObject *);}
static PyObject *varget_AmSipRequest_port(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->port;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_port(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_port(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->port = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_r_uri(void *, PyObject *);}
static PyObject *varget_AmSipRequest_r_uri(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->r_uri;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_r_uri(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_r_uri(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->r_uri = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_route(void *, PyObject *);}
static PyObject *varget_AmSipRequest_route(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->route;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_route(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_route(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->route = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_to(void *, PyObject *);}
static PyObject *varget_AmSipRequest_to(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->to;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_to(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_to(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->to = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_to_tag(void *, PyObject *);}
static PyObject *varget_AmSipRequest_to_tag(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->to_tag;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_to_tag(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_to_tag(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->to_tag = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_AmSipRequest_user(void *, PyObject *);}
static PyObject *varget_AmSipRequest_user(void *sipSelf, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    sipVal = &sipCpp->user;

    return sipConvertFromType(sipVal,sipType_string, NULL);
}


extern "C" {static int varset_AmSipRequest_user(void *, PyObject *, PyObject *);}
static int varset_AmSipRequest_user(void *sipSelf, PyObject *sipPy, PyObject *)
{
    string *sipVal;
    AmSipRequest *sipCpp = reinterpret_cast<AmSipRequest *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<string *>(sipForceConvertToType(sipPy,sipType_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->user = *sipVal;

    sipReleaseType(sipVal, sipType_string, sipValState);

    return 0;
}

sipVariableDef variables_AmSipRequest[] = {
    {sipName_body, varget_AmSipRequest_body, varset_AmSipRequest_body, 0},
    {sipName_callid, varget_AmSipRequest_callid, varset_AmSipRequest_callid, 0},
    {sipName_cmd, varget_AmSipRequest_cmd, varset_AmSipRequest_cmd, 0},
    {sipName_cseq, varget_AmSipRequest_cseq, varset_AmSipRequest_cseq, 0},
    {sipName_domain, varget_AmSipRequest_domain, varset_AmSipRequest_domain, 0},
    {sipName_dstip, varget_AmSipRequest_dstip, varset_AmSipRequest_dstip, 0},
    {sipName_from, varget_AmSipRequest_from, varset_AmSipRequest_from, 0},
    {sipName_from_tag, varget_AmSipRequest_from_tag, varset_AmSipRequest_from_tag, 0},
    {sipName_from_uri, varget_AmSipRequest_from_uri, varset_AmSipRequest_from_uri, 0},
    {sipName_hdrs, varget_AmSipRequest_hdrs, varset_AmSipRequest_hdrs, 0},
    {sipName_method, varget_AmSipRequest_method, varset_AmSipRequest_method, 0},
    {sipName_next_hop, varget_AmSipRequest_next_hop, varset_AmSipRequest_next_hop, 0},
    {sipName_port, varget_AmSipRequest_port, varset_AmSipRequest_port, 0},
    {sipName_r_uri, varget_AmSipRequest_r_uri, varset_AmSipRequest_r_uri, 0},
    {sipName_route, varget_AmSipRequest_route, varset_AmSipRequest_route, 0},
    {sipName_to, varget_AmSipRequest_to, varset_AmSipRequest_to, 0},
    {sipName_to_tag, varget_AmSipRequest_to_tag, varset_AmSipRequest_to_tag, 0},
    {sipName_user, varget_AmSipRequest_user, varset_AmSipRequest_user, 0},
};


sipClassTypeDef sipTypeDef_py_sems_lib_AmSipRequest = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_AmSipRequest,
        {0}
    },
    {
        sipNameNr_AmSipRequest,
        {0, 0, 1},
        0, 0,
        0, 0,
        18, variables_AmSipRequest,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    0,
    0,
    init_AmSipRequest,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_AmSipRequest,
    assign_AmSipRequest,
    array_AmSipRequest,
    copy_AmSipRequest,
    release_AmSipRequest,
    cast_AmSipRequest,
    0,
    0,
    0
};
